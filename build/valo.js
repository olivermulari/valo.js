(()=>{"use strict";var t={707:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var o=i(347),s=i(319),a=new(i(236).Vector3)(1,1,1),h=function(t){function e(e){var i=t.call(this)||this;return i.scene=e,i.fov=60,i.aspect=1,i.zNear=.1,i.zFar=2e3,i.perspective=new o.Matrix4,i.inversePerspective=new o.Matrix4,i.inverseWorldMatrix=new o.Matrix4,i.worldMatrixNeedsUpdate=!1,i.perspectiveNeedsUpdate=!0,i}return n(e,t),e.prototype.setActive=function(){this.scene.activeCamera=this,this.scene.viewMatrixNeedsUpdate=!0},e.prototype.updateWorldMatrix=function(){var t=this.inverseWorldMatrix,e=this.position;this.quaternion.setFromEuler(this.rotation),t.compose(e,this.quaternion,a),t.inverse(t),this.worldMatrixNeedsUpdate=!1},e.prototype.updatePerspective=function(){var t=this.fov,e=this.aspect,i=this.zNear,r=this.zFar;this.perspective.setPerspective(t,e,i,r),this.inversePerspective.inverse(this.perspective),this.perspectiveNeedsUpdate=!1},e.prototype.setAspect=function(t){this.aspect=t,this.perspectiveNeedsUpdate=!0,this.scene.viewMatrixNeedsUpdate=!0},e.prototype.update=function(){this.worldMatrixNeedsUpdate=!0,this.scene.viewMatrixNeedsUpdate=!0},e.prototype.forceUpdate=function(){this.update(),this.updatePerspective(),this.updateWorldMatrix()},e.prototype.updateInteractions=function(t){},e.prototype._onKeyDownCallBack=function(t){},e.prototype._onKeyUpCallBack=function(t){},e.prototype._onRotationChangeCallback=function(){this.worldMatrixNeedsUpdate=!0,this.scene.viewMatrixNeedsUpdate=!0},e.prototype._onPositionChangeCallBack=function(){this.worldMatrixNeedsUpdate=!0,this.scene.viewMatrixNeedsUpdate=!0},e}(s.Object3D);e.Camera=h},725:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var o=i(707),s=i(236),a=i(601),h=new s.Vector3,c=function(t){function e(e){var i=t.call(this,e)||this;return i.speed=.5,i.sensitivity=10,i.inverse=!1,i}return n(e,t),e.prototype.updateInteractions=function(t){var e=t.direction,i=t.draggingInfoDidUpdate;if(e!==a.DIRECTION.NONE){var r=this.getDirection(),n=h.set(0,1,0).applyQuaternion(this.quaternion);switch(e){case a.DIRECTION.UP:break;case a.DIRECTION.UR:r.applyAxisAngle(n,-Math.PI/4);break;case a.DIRECTION.RIGHT:r.applyAxisAngle(n,-Math.PI/2);break;case a.DIRECTION.DR:r.applyAxisAngle(n,3*-Math.PI/4);break;case a.DIRECTION.DOWN:r.inverse(r);break;case a.DIRECTION.DL:r.applyAxisAngle(n,3*Math.PI/4);break;case a.DIRECTION.LEFT:r.applyAxisAngle(n,Math.PI/2);break;case a.DIRECTION.UL:r.applyAxisAngle(n,Math.PI/4)}this.translate(r.multiply(this.speed))}if(i){var o=t.draggingInfo,s=5e-4*(this.inverse?-1:1)*this.sensitivity;this.rotateX((o.y0-o.y1)*s),this.rotateY((o.x0-o.x1)*s)}},e}(o.Camera);e.FreeCamera=c},469:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var o=i(707),s=i(236),a=new s.Vector3(0,1,0),h=function(t){function e(e){var i=t.call(this,e)||this;return i.target=new s.Vector3,i}return n(e,t),e.prototype.updateWorldMatrix=function(){this.lookAt(this.target),this.worldMatrixNeedsUpdate=!1,this.scene.viewMatrixNeedsUpdate=!0},e.prototype.lookAt=function(t){var e=this.position,i=this.inverseWorldMatrix;return i.inverse(i.lookAt(e,t,a)),this},e}(o.Camera);e.TargetCamera=h},601:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.DIRECTION={NONE:-1,UP:0,DOWN:1,LEFT:2,RIGHT:3,UR:4,DR:5,DL:6,UL:7}},627:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(e){var i=t.call(this)||this;return i.width=e&&e.width?e.width:10,i.height=e&&e.height?e.height:10,i.depth=e&&e.depth?e.depth:10,i.buildGeometry(),i}return n(e,t),e.prototype.buildGeometry=function(){for(var t=this.width/2,e=this.height/2,i=this.height/2,r=[1,-1,1,-1,-1,1,-1,1,1,1,1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,1,1,-1,1,-1,-1,1,-1,1,1,1,1,-1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,1,1,-1,1,-1,1,1,-1,1,1,1,1,-1,1,1,-1,-1,-1,-1,-1,-1,-1,1],n=0;n<r.length;n+=3)r[n]*=t,r[n+1]*=e,r[n+2]*=i;this.amountOfVertices=24,this.setPositionAttribute(new Float32Array(r),3),this.setNormalsAttribute(new Float32Array([0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0]),3),this.setIndicesAttribute(new Uint16Array([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]),3)},e}(i(103).Geometry);e.BoxGeometry=o},332:function(t,e){var i,r=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e){this.itemSize=t,this.buffer=null,this.type=e}return t.prototype.createBuffer=function(t){var e=t.createBuffer();this.buffer=e},t.prototype.bindBufferWithProgram=function(t,e,i){var r=e.vao;if(this.array&&r){var n=this.array,o=this.buffer,s=0;switch(this.type){case"normal":s=i.A_NORMAL;break;case"position":s=i.A_POSITION}t.enableVertexAttribArray(s),t.bindBuffer(t.ARRAY_BUFFER,o),t.bufferData(t.ARRAY_BUFFER,n,t.STATIC_DRAW);var a=this.itemSize,h=t.FLOAT;t.vertexAttribPointer(s,a,h,!1,0,0)}},t}();e.BufferAttribute=n;var o=function(t){function e(e,i,r){var n=t.call(this,i,r)||this;return n.array=e,n}return r(e,t),e}(n);e.Float32BufferAttribute=o;var s=function(t){function e(e,i,r){var n=t.call(this,i,r)||this;return n.bindBufferWithProgram=function(){},n.array=e,n}return r(e,t),e.prototype.createBuffer=function(t){var e=t.createBuffer(),i=this.array;t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,e),t.bufferData(t.ELEMENT_ARRAY_BUFFER,i,t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),this.buffer=e},e}(n);e.Uint16BufferElementAttribute=s},103:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=i(332);e.ATTRIBUTE_LOCATION={POSITION:0,INDICES:1,NORMAL:2};var n=0,o=function(){function t(){this.id=++n,this.vao=null,this.attributes={},this.amountOfVertices=0,this.hasPositions=!1,this.hasNormals=!1,this.hasIndices=!1,this.isBuffersSet=!1,this.isBuffersBind=!1}return t.prototype.setBuffers=function(t){if(!this.isBuffersSet){var i=t.createVertexArray();t.bindVertexArray(i),this.vao=i,this.hasPositions&&this.attributes[e.ATTRIBUTE_LOCATION.POSITION].createBuffer(t),this.hasNormals&&this.attributes[e.ATTRIBUTE_LOCATION.NORMAL].createBuffer(t),this.hasIndices&&this.attributes[e.ATTRIBUTE_LOCATION.INDICES].createBuffer(t),this.isBuffersSet=!0,t.bindVertexArray(null)}},t.prototype.bindBuffers=function(t,i){this.isBuffersBind||(t.bindVertexArray(this.vao),this.hasPositions&&-1!==i.A_POSITION&&this.attributes[e.ATTRIBUTE_LOCATION.POSITION].bindBufferWithProgram(t,this,i),this.hasNormals&&-1!==i.A_NORMAL&&this.attributes[e.ATTRIBUTE_LOCATION.NORMAL].bindBufferWithProgram(t,this,i),this.hasIndices,t.bindVertexArray(null))},t.prototype.setPositionAttribute=function(t,i){this.attributes[e.ATTRIBUTE_LOCATION.POSITION]=new r.Float32BufferAttribute(t,i,"position"),this.hasPositions=!0},t.prototype.setNormalsAttribute=function(t,i){this.attributes[e.ATTRIBUTE_LOCATION.NORMAL]=new r.Float32BufferAttribute(t,i,"normal"),this.hasNormals=!0},t.prototype.setIndicesAttribute=function(t,i){this.attributes[e.ATTRIBUTE_LOCATION.INDICES]=new r.Uint16BufferElementAttribute(t,i,"indices"),this.hasIndices=!0},t.prototype.getPositions=function(){if(this.hasPositions){var t=this.attributes[e.ATTRIBUTE_LOCATION.POSITION].array;if(t instanceof Float32Array)return t}return new Float32Array},t}();e.Geometry=o},276:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var o=i(103),s=i(522),a=function(t){function e(e){var i=t.call(this)||this;return i.width=e&&e.width?e.width:100,i.height=e&&e.height?e.height:100,i.subdivisions=e&&e.subdividions?e.subdividions:10,i.buildGeometry(),i}return n(e,t),e.prototype.buildGeometry=function(){for(var t=this.width,e=this.height,i=this.subdivisions,r=[],n=[],o=Array((i+1)*(i+1)*3).fill(0).map((function(t,e){return e%3==1?1:0})),a=t/i,h=e/i,c=0;c<=i;c++)for(var u=0;u<=i;u++){var l=u*a-t/2,p=c*h-e/2;r.push(l,0,p)}for(c=0;c<i;c++)for(u=0;u<i;u++){var f=s.MathUtils.index1From2D(u,c,i+1),d=s.MathUtils.index1From2D(u,c+1,i+1),m=s.MathUtils.index1From2D(u+1,c,i+1),y=s.MathUtils.index1From2D(u+1,c+1,i+1);n.push(f,m,d,d,m,y)}this.amountOfVertices=n.length,this.setPositionAttribute(new Float32Array(r),3),this.setNormalsAttribute(new Float32Array(o),3),this.setIndicesAttribute(new Uint16Array(n),3)},e}(o.Geometry);e.PlaneGeometry=a},550:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var o=i(103),s=i(236),a=function(t){function e(e){var i=t.call(this)||this;return i.radius=e&&e.radius?e.radius:5,i.subdivisions=e&&e.subdivisions?e.subdivisions:30,i.buildGeometry(),i}return n(e,t),e.prototype.buildGeometry=function(){var t=this.radius,e=2*this.subdivisions,i=this.subdivisions,r=[],n=[],o=[];r.push(0,t,0,0,-t,0),o.push(0,1,0,0,-1,0);for(var a=new s.Vector3(0,1,0),h=new s.Vector3(t,0,0),c=new s.Vector3(0,t,0),u=2*Math.PI/e,l=Math.PI/i,p=new Array(e).fill(0).map((function(){return new Array(i+1).fill(0)})),f=2,d=0;d<e;d++){var m=d*u;h.set(t,0,0),h.applyAxisAngle(a,m),p[d][0]=0,p[d][i]=1;for(var y=1;y<i;y++){var v=y*l;c.set(0,t,0),c.applyAxisAngle(h,v),r.push(c.x,c.y,c.z),c.normalize(),o.push(c.x,c.y,c.z),p[d][y]=f++}if(d>0)for(var g=0;g<i;g++){var x=p[d-1][g],_=p[d][g],w=p[d-1][g+1],b=p[d][g+1];0===g?n.push(0,b,w):g===i-1?n.push(1,x,_):n.push(x,_,w,_,b,w)}if(d===e-1)for(g=0;g<i;g++){var I=p[d][g];_=p[0][g],w=p[d][g+1],b=p[0][g+1],0===g?n.push(0,b,w):g===i-1?n.push(1,I,_):n.push(I,_,w,_,b,w)}}this.amountOfVertices=n.length,this.setPositionAttribute(new Float32Array(r),3),this.setNormalsAttribute(new Float32Array(o),3),this.setIndicesAttribute(new Uint16Array(n),3)},e}(o.Geometry);e.SphereGeometry=a},897:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=i(103),n=function(){function t(t){this.mesh=t,this.geometry=new r.Geometry}return t.prototype.setGeometry=function(){var t=this.mesh.boundingBox.box,e=t.min.x,i=t.max.x,r=t.min.y,n=t.max.y,o=t.min.z,s=t.max.z,a=new Float32Array(24),h=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);a[0]=e,a[1]=r,a[2]=o,a[3]=i,a[4]=r,a[5]=o,a[6]=i,a[7]=n,a[8]=o,a[9]=e,a[10]=n,a[11]=o,a[12]=e,a[13]=r,a[14]=s,a[15]=i,a[16]=r,a[17]=s,a[18]=i,a[19]=n,a[20]=s,a[21]=e,a[22]=n,a[23]=s,this.geometry.setPositionAttribute(a,3),this.geometry.hasIndices||this.geometry.setIndicesAttribute(h,3)},t}();e.BoxHelper=n},252:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=i(103),n=i(861),o=i(347),s=new n.Box,a=(new o.Matrix4,function(){function t(t){this.camera=t,this.geometry=new r.Geometry}return t.prototype.setGeometry=function(){var t=s;t.min.set(-1,-1,-1),t.max.set(1,1,1);var e=t.min.x,i=t.max.x,r=t.min.y,n=t.max.y,o=t.min.z,a=t.max.z,h=new Float32Array(24),c=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);h[0]=e,h[1]=r,h[2]=o,h[3]=i,h[4]=r,h[5]=o,h[6]=i,h[7]=n,h[8]=o,h[9]=e,h[10]=n,h[11]=o,h[12]=e,h[13]=r,h[14]=a,h[15]=i,h[16]=r,h[17]=a,h[18]=i,h[19]=n,h[20]=a,h[21]=e,h[22]=n,h[23]=a,console.log(h),this.geometry.setPositionAttribute(h,3),this.geometry.hasIndices||this.geometry.setIndicesAttribute(c,3)},t}());e.CameraHelper=a},36:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=i(897),n=i(252),o=i(707),s=i(636),a=function(){function t(){this.boxes=[],this.cameras=[]}return t.prototype.add=function(t){var e=null;t instanceof o.Camera?(e=new n.CameraHelper(t),this.cameras.push(e)):t instanceof s.Mesh&&(e=new r.BoxHelper(t),this.boxes.push(e))},t}();e.HelperManager=a},41:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=i(636),n=i(253),o=i(344),s=function(){function t(t){this.visible=void 0===t||!t.visible||t.visible,this.scene,this.nodes=[]}return t.prototype._init=function(t){var e=t.divID;if(void 0!==e){var i=document.getElementById(e);if(null!==i){var r=document.createElement("div");r.id="valo-inspector",r.style.position="absolute",r.style.top="0px",r.style.right="0px",r.style.height=i.getBoundingClientRect().height+"px",r.style.width="200px",r.style.color="rgb(45, 156, 39)",r.style.pointerEvents="none",r.style.userSelect="none",r.style.fontFamily="Courier, monospace";var n=document.createElement("div");n.classList.add("title");var o=document.createElement("h1");o.style.margin="0px",o.innerText="INSPECTOR",o.style.fontFamily="Courier, monospace",o.style.fontSize="14px",o.style.textAlign="center",n.appendChild(o),r.appendChild(n);var s=document.createElement("div");s.id="valo-inspector-scene";var a=document.createElement("div");a.id="valo-inspector-object",r.appendChild(s),r.appendChild(a),i.appendChild(r)}}},t.prototype.sceneUpdate=function(t){var e=this;void 0===this.scene&&(this.scene=t);var i=t.meshListDidUpdate;t.id!==this.scene.id&&(this.resetScene(),this.scene=t,i=!0),i&&this.scene.meshes.forEach((function(t){e.addNode(t)}))},t.prototype.addNode=function(t){var e=this,i=document.createElement("div");i.style.paddingLeft="10px",i.style.backgroundColor="rgb(50, 50, 50)",i.style.border="1px solid grey";var n=document.createElement("h1");n.style.margin="0px",n.innerText=t.name,n.style.fontFamily="Courier, monospace",n.style.fontSize="12px",t instanceof r.Mesh&&(n.onclick=function(){return e.displayMeshOptions(t)}),null!==n.onclick&&(n.style.cursor="pointer",n.style.pointerEvents="auto"),i.appendChild(n);var o=document.getElementById("valo-inspector-scene");null!==o&&o.appendChild(i)},t.prototype.displayMeshOptions=function(t){console.log(t.name);var e=document.getElementById("valo-inspector-object");if(null!==e){e.innerHTML="";var i=t.material,r=document.createElement("div");if(i instanceof n.StandardMaterial){new o.KnobInput(e);var s=document.createElement("input");s.type="range",s.min="1",s.max="100",s.value=""+Math.floor(100*i.diffuse.x),s.style.pointerEvents="auto",s.oninput=function(){i.diffuse.x=.01*s.valueAsNumber};var a=document.createElement("input");a.type="range",a.min="1",a.max="100",a.value=""+Math.floor(100*i.diffuse.y),a.style.pointerEvents="auto",a.oninput=function(){i.diffuse.y=.01*a.valueAsNumber};var h=document.createElement("input");h.type="range",h.min="1",h.max="100",h.value=""+Math.floor(100*i.diffuse.z),h.style.pointerEvents="auto",h.oninput=function(){i.diffuse.z=.01*h.valueAsNumber},r.appendChild(s),r.appendChild(a),r.appendChild(h)}e.appendChild(r)}},t.prototype.resetScene=function(){this.nodes.forEach((function(t){var e=t.parentNode;null!==e&&e.removeChild(t)})),this.nodes=[]},t}();e.Inspector=s},344:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){this.parent=t,this.listener=e,this.min=0,this.max=100,this.value=50,this.size=30,this.width=2,this.color="rgb(0, 0, 255)",this.create()}return t.prototype.setAttributesNS=function(t){for(var e=[],i=1;i<arguments.length;i++)e[i-1]=arguments[i];if(e.length%2==0)for(var r=0;r<e.length;r+=2)t.setAttributeNS(null,e[r],e[r+1]);else console.log("Invalid length of args")},t.prototype.create=function(){var t=document.createElement("div");t.style.width=this.size+"px",t.style.height=this.size+"px",t.style.position="relative";var e=document.createElementNS("http://www.w3.org/2000/svg","svg");this.setAttributesNS(e,"width",""+this.size,"height",""+this.size,"viewBox","0 0 "+this.size+" "+this.size);var i=this.size/2-this.width/2,r=document.createElementNS("http://www.w3.org/2000/svg","circle");this.setAttributesNS(r,"cx",""+this.size/2,"cy",""+this.size/2,"r",""+i,"fill","none","stroke","#e6e6e6","stroke-width",""+this.width);var n=2*Math.PI*i,o=document.createElementNS("http://www.w3.org/2000/svg","circle");this.setAttributesNS(o,"cx",""+this.size/2,"cy",""+this.size/2,"r",""+i,"fill","none","stroke",""+this.color,"stroke-width",""+this.width,"stroke-dasharray","calc("+this.value+" * "+n+" / 100) "+n,"transform","rotate(90) translate(0, -"+this.size+")"),e.appendChild(r),e.appendChild(o);var s=document.createElement("p");s.innerText=""+this.value,s.style.margin="0px",s.style.position="absolute",s.style.top="50%",s.style.left="50%",s.style.transform="translateX(-50%) translateY(-50%)",s.style.color=this.color,t.appendChild(e),t.appendChild(s),this.parent.appendChild(t)},t.prototype.update=function(){void 0!==this.listener&&this.listener(this.value)},t}();e.KnobInput=i},563:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=i(708),n=0,o=function(){function t(t,e){this.divID=void 0!==e?e:"valo-div"+n,this.canvasID=n,this.width=0,this.height=0,this.aspect=0,this.didAspectUpdate=!1,this.element=null,this.elementId="valo-canvas"+n++,this.interactionManager=new r.InteractionManager(this),this.enableInteractions=!0,this.pixelRatio=window.devicePixelRatio/t,this.autoResize=!0,this._init()}return t.prototype._init=function(){var t=this.createCanvas();this.enableInteractions&&this.interactionManager._init(t),this.autoResize&&window.addEventListener("resize",this.resize(this))},t.prototype.createCanvas=function(){this.autoResize&&this.adjustToTheParent();var t=document.createElement("canvas");t.setAttribute("id",this.elementId),t.width=this.width*this.pixelRatio,t.height=this.height*this.pixelRatio,this.element=t;var e=document.getElementById(this.divID);return null===e&&((e=document.createElement("div")).style.width=window.innerWidth+"px",e.style.height=window.innerHeight+"px",document.body.appendChild(e)),e.style.overflow="hidden",e.appendChild(t),this.addStyles(),t},t.prototype.addStyles=function(){var t=this.element;t?(t.style.width=this.width+"px",t.style.height=this.height+"px;",t.style.margin="0px",t.style.position="absolute",t.style.top="0px",t.style.left="0px",t.style.overflow="hidden"):console.error("VALO.CanvasManager: addStyles() no canvas element assigned")},t.prototype.adjustToTheParent=function(){if(this.divID){var t=document.getElementById(this.divID);if(!t)return;var e=t.getBoundingClientRect();this.width=e.width,this.height=e.height}else this.width=window.innerWidth,this.height=window.innerHeight;this.setAspect()},t.prototype.setAspect=function(){this.height>0&&(this.aspect=this.width/this.height,this.didAspectUpdate=!0)},t.prototype.resize=function(t){var e=this;return function(){t.adjustToTheParent();var i=e.element;i&&(i.width=t.width*t.pixelRatio,i.height=t.height*t.pixelRatio,i.style.width=t.width+"px",i.style.height=t.height+"px")}},t.prototype.destroy=function(){window.removeEventListener("resize",this.resize(this));var t=this.element;t&&t.parentNode&&t.parentNode.removeChild(t)},t}();e.CanvasManager=o},708:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=i(601),n=function(){function t(t){var e=this;this._onPointerDown=function(t){var i=e.draggingInfo;i.x0=t.clientX,i.y0=t.clientY,i.x1=t.clientX,i.y1=t.clientY,e.isDragging=!0},this._onPointerUp=function(t){e.isDragging=!1},this._onPointerMove=function(t){if(e.isDragging){var i=e.draggingInfo;i.x0=i.x1,i.y0=i.y1,i.x1=t.clientX,i.y1=t.clientY,e.draggingInfoDidUpdate=!0}},this._onPointerLeave=function(t){e.isDragging=!1},this._onKeyDown=function(t){switch(t.which){case 38:case 87:t.preventDefault(),e.direction===r.DIRECTION.RIGHT?e.direction=r.DIRECTION.UR:e.direction===r.DIRECTION.LEFT?e.direction=r.DIRECTION.UL:e.direction===r.DIRECTION.DR?e.direction=r.DIRECTION.UR:e.direction===r.DIRECTION.DL?e.direction=r.DIRECTION.UL:e.direction===r.DIRECTION.NONE&&(e.direction=r.DIRECTION.UP);break;case 40:case 83:t.preventDefault(),e.direction===r.DIRECTION.RIGHT?e.direction=r.DIRECTION.DR:e.direction===r.DIRECTION.LEFT?e.direction=r.DIRECTION.DL:e.direction===r.DIRECTION.UR?e.direction=r.DIRECTION.DR:e.direction===r.DIRECTION.UL?e.direction=r.DIRECTION.DL:e.direction===r.DIRECTION.NONE&&(e.direction=r.DIRECTION.DOWN);break;case 37:case 65:t.preventDefault(),e.direction===r.DIRECTION.UP?e.direction=r.DIRECTION.UL:e.direction===r.DIRECTION.DOWN?e.direction=r.DIRECTION.DL:e.direction===r.DIRECTION.UR?e.direction=r.DIRECTION.UL:e.direction===r.DIRECTION.DR?e.direction=r.DIRECTION.DL:e.direction===r.DIRECTION.NONE&&(e.direction=r.DIRECTION.LEFT);break;case 39:case 68:t.preventDefault(),e.direction===r.DIRECTION.UP?e.direction=r.DIRECTION.UR:e.direction===r.DIRECTION.DOWN?e.direction=r.DIRECTION.DR:e.direction===r.DIRECTION.UL?e.direction=r.DIRECTION.UR:e.direction===r.DIRECTION.DL?e.direction=r.DIRECTION.DR:e.direction===r.DIRECTION.NONE&&(e.direction=r.DIRECTION.RIGHT)}},this._onKeyUp=function(t){switch(t.which){case 38:case 87:t.preventDefault(),e.direction===r.DIRECTION.UP?e.direction=r.DIRECTION.NONE:e.direction===r.DIRECTION.UL?e.direction=r.DIRECTION.LEFT:e.direction===r.DIRECTION.UR&&(e.direction=r.DIRECTION.RIGHT);break;case 40:case 83:t.preventDefault(),e.direction===r.DIRECTION.DOWN?e.direction=r.DIRECTION.NONE:e.direction===r.DIRECTION.DL?e.direction=r.DIRECTION.LEFT:e.direction===r.DIRECTION.DR&&(e.direction=r.DIRECTION.RIGHT);break;case 37:case 65:t.preventDefault(),e.direction===r.DIRECTION.LEFT?e.direction=r.DIRECTION.NONE:e.direction===r.DIRECTION.UL?e.direction=r.DIRECTION.UP:e.direction===r.DIRECTION.DL&&(e.direction=r.DIRECTION.DOWN);break;case 39:case 68:t.preventDefault(),e.direction===r.DIRECTION.RIGHT?e.direction=r.DIRECTION.NONE:e.direction===r.DIRECTION.UR?e.direction=r.DIRECTION.UP:e.direction===r.DIRECTION.DR&&(e.direction=r.DIRECTION.DOWN)}},this.canvas=t,this.direction=r.DIRECTION.NONE,this.isDragging=!1,this.draggingInfo={x0:0,y0:0,x1:0,y1:0},this.draggingInfoDidUpdate=!1}return t.prototype._init=function(t){document.onkeydown=this._onKeyDown,document.onkeyup=this._onKeyUp,t.onpointerdown=this._onPointerDown,t.onpointermove=this._onPointerMove,t.onpointerup=this._onPointerUp,t.onpointerleave=this._onPointerLeave},t.prototype.updateScene=function(t){t.activeCamera&&t.activeCamera.updateInteractions(this),this.draggingInfoDidUpdate=!1},t.prototype.destroy=function(){},t}();e.InteractionManager=n},479:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var o=i(236),s=i(337),a=function(t){function e(){var e=t.call(this)||this;return e.ambient=new o.Vector3(.2,.2,.2),e.diffuse=new o.Vector3(.5,.5,.5),e.specular=new o.Vector3(1,1,1),e.reverseDirection=new o.Vector3(0,1,0),e.type="directional",s.Light.push(e),e}return n(e,t),e}(s.Light);e.DirectionalLight=a},337:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(){this.type="light"}return t.push=function(e){t.cache.arr.push(e),t.cache.amount+=1},t}();e.Light=i,i.cache={amount:0,arr:[]}},234:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(e,i,r,n){var o=t.call(this)||this;return o.color=[void 0!==e?e:1,void 0!==i?i:1,void 0!==r?r:1,void 0!==n?n:1],o.type="color",o}return n(e,t),e}(i(520).Material);e.Color=o},520:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});e.Material=function(){this.type="material"}},905:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(e){var i=t.call(this)||this;return i.color=e,i.type="naive",i}return n(e,t),e}(i(520).Material);e.NaiveMaterial=o},253:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var o=i(520),s=i(236),a=function(t){function e(){var e=t.call(this)||this;return e.ambient=new s.Vector3(.0215,.1745,.0215),e.diffuse=new s.Vector3(.07568,.61424,.07568),e.specular=new s.Vector3(.633,.727811,.633),e.shininess=26,e.type="standard",e}return n(e,t),e}(o.Material);e.StandardMaterial=a},861:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=i(236),n=new r.Vector3,o=[new r.Vector3,new r.Vector3,new r.Vector3,new r.Vector3,new r.Vector3,new r.Vector3,new r.Vector3,new r.Vector3],s=function(){function t(t,e){this.min=void 0!==t?t:new r.Vector3,this.max=void 0!==e?e:new r.Vector3}return t.prototype.set=function(t,e){return this.min.copy(t),this.max.copy(e),this},t.prototype.expandByPoint=function(t){return this.min.min(t),this.max.max(t),this},t.prototype.setFromPoints=function(t){var e=this;return t.forEach((function(t){e.expandByPoint(t)})),this},t.prototype.setFromPositions=function(t){for(var e=0;e<t.length;e+=3){var i=t[e],r=t[e+1],o=t[e+2];n.set(i,r,o),this.expandByPoint(n)}return this},t.prototype.intersectsPlane=function(t){var e,i;return t.normal.x>0?(e=t.normal.x*this.min.x,i=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,i=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,i+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,i+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,i+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,i+=t.normal.z*this.min.z),e<=-t.constant&&i>=-t.constant},t.prototype.applyMatrix4=function(t){return o[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),o[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),o[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),o[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),o[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),o[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),o[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),o[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(o),this},t.prototype.copy=function(t){return this.min.copy(t.min),this.max.copy(t.max),this},t.prototype.clone=function(){return(new t).copy(this)},t}();e.Box=s},481:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=i(347),n=i(522),o=new r.Matrix4,s=function(){function t(t,e,i){this.x=void 0!==t?t:0,this.y=void 0!==e?e:0,this.z=void 0!==i?i:0,this.order="YXZ"}return t.prototype.setFromRotationMatrix=function(t){var e=t.elements,i=e[0],r=e[4],o=e[8],s=e[1],a=e[5],h=e[9],c=e[2],u=e[6],l=e[10],p=this.order;return"XYZ"===p?(this.y=Math.asin(n.MathUtils.clamp(o,-1,1)),Math.abs(o)<.9999999?(this.x=Math.atan2(-h,l),this.z=Math.atan2(-r,i)):(this.x=Math.atan2(u,a),this.z=0)):"YXZ"===p?(this.x=Math.asin(-n.MathUtils.clamp(h,-1,1)),Math.abs(h)<.9999999?(this.y=Math.atan2(o,l),this.z=Math.atan2(s,a)):(this.y=Math.atan2(-c,i),this.z=0)):"ZXY"===p?(this.x=Math.asin(n.MathUtils.clamp(u,-1,1)),Math.abs(u)<.9999999?(this.y=Math.atan2(-c,l),this.z=Math.atan2(-r,a)):(this.y=0,this.z=Math.atan2(s,i))):"ZYX"===p?(this.y=Math.asin(-n.MathUtils.clamp(c,-1,1)),Math.abs(c)<.9999999?(this.x=Math.atan2(u,l),this.z=Math.atan2(s,i)):(this.x=0,this.z=Math.atan2(-r,a))):"YZX"===p?(this.z=Math.asin(n.MathUtils.clamp(s,-1,1)),Math.abs(s)<.9999999?(this.x=Math.atan2(-h,a),this.y=Math.atan2(-c,i)):(this.x=0,this.y=Math.atan2(o,l))):"XZY"===p&&(this.z=Math.asin(-n.MathUtils.clamp(r,-1,1)),Math.abs(r)<.9999999?(this.x=Math.atan2(u,a),this.y=Math.atan2(o,i)):(this.x=Math.atan2(-h,l),this.y=0)),this},t.prototype.setFromQuaternion=function(t){return o.setFromQuaternion(t),this.setFromRotationMatrix(o)},t.prototype.toQuaternion=function(t){var e=this.x,i=this.y,r=this.z,n=this.order,o=Math.cos(e/2),s=Math.cos(i/2),a=Math.cos(r/2),h=Math.sin(e/2),c=Math.sin(i/2),u=Math.sin(r/2);return"XYZ"===n?(t.x=h*s*a+o*c*u,t.y=o*c*a-h*s*u,t.z=o*s*u+h*c*a,t.w=o*s*a-h*c*u):"YXZ"===n?(t.x=h*s*a+o*c*u,t.y=o*c*a-h*s*u,t.z=o*s*u-h*c*a,t.w=o*s*a+h*c*u):"ZXY"===n?(t.x=h*s*a-o*c*u,t.y=o*c*a+h*s*u,t.z=o*s*u+h*c*a,t.w=o*s*a-h*c*u):"ZYX"===n?(t.x=h*s*a-o*c*u,t.y=o*c*a+h*s*u,t.z=o*s*u-h*c*a,t.w=o*s*a+h*c*u):"YZX"===n?(t.x=h*s*a+o*c*u,t.y=o*c*a+h*s*u,t.z=o*s*u-h*c*a,t.w=o*s*a-h*c*u):"XZY"===n&&(t.x=h*s*a-o*c*u,t.y=o*c*a-h*s*u,t.z=o*s*u+h*c*a,t.w=o*s*a+h*c*u),t},t.prototype.equals=function(t,e){var i=void 0!==e?e:0;return Math.abs(this.x-t.x)<i&&Math.abs(this.y-t.y)<i&&Math.abs(this.z-t.z)<i},t}();e.Euler=s},238:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=i(236),n=i(450),o=i(861),s=i(636),a=new o.Box,h=new r.Vector3,c=function(){function t(t,e,i,r,o,s){this.planes=[void 0!==t?t:new n.Plane,void 0!==e?e:new n.Plane,void 0!==i?i:new n.Plane,void 0!==r?r:new n.Plane,void 0!==o?o:new n.Plane,void 0!==s?s:new n.Plane]}return t.prototype.set=function(t,e,i,r,n,o){var s=this.planes;return s[0].copy(t),s[1].copy(e),s[2].copy(i),s[3].copy(r),s[4].copy(n),s[5].copy(o),this},t.prototype.setFromProjectionMatrix=function(t){var e=this.planes,i=t.elements,r=i[0],n=i[1],o=i[2],s=i[3],a=i[4],h=i[5],c=i[6],u=i[7],l=i[8],p=i[9],f=i[10],d=i[11],m=i[12],y=i[13],v=i[14],g=i[15];return e[0].setComponents(s-r,u-a,d-l,g-m).normalize(),e[1].setComponents(s+r,u+a,d+l,g+m).normalize(),e[2].setComponents(s+n,u+h,d+p,g+y).normalize(),e[3].setComponents(s-n,u-h,d-p,g-y).normalize(),e[4].setComponents(s-o,u-c,d-f,g-v).normalize(),e[5].setComponents(s+o,u+c,d+f,g+v).normalize(),this},t.prototype.containsPoint=function(t){for(var e=this.planes,i=0;i<6;i++)if(e[i].distanceToPoint(t)<0)return!1;return!0},t.prototype.intersectsBox=function(t){for(var e=this.planes,i=0;i<6;i++){var r=e[i];if(h.x=r.normal.x>0?t.max.x:t.min.x,h.y=r.normal.y>0?t.max.y:t.min.y,h.z=r.normal.z>0?t.max.z:t.min.z,r.distanceToPoint(h)<0)return!1}return!0},t.prototype.intersectsObject=function(t){if(t instanceof s.Mesh){var e=t.worldMatrix;return a.copy(t.boundingBox.box).applyMatrix4(e),this.intersectsBox(a)}return this.containsPoint(t.position)},t.prototype.copy=function(t){var e=t.planes;return this.set(e[0],e[1],e[2],e[3],e[4],e[5]),this},t.prototype.clone=function(){return(new t).copy(this)},t}();e.Frustum=c},522:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(){}return t.distance=function(t,e,i,r){var n=i-t,o=r-e;return Math.sqrt(n*n-o-o)},t.index1From2D=function(t,e,i){return e*i+t},t.clamp=function(t,e,i){return Math.max(e,Math.min(t,i))},t}();e.MathUtils=i},347:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var r,n=i(236),o=new n.Vector3,s=new n.Vector3,a=new n.Vector3,h=new n.Vector3(0,0,0),c=new n.Vector3(1,1,1),u=function(){function t(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}return t.prototype.set=function(t,e,i,r,n,o,s,a,h,c,u,l,p,f,d,m){var y=this.elements;return y[0]=t,y[1]=e,y[2]=i,y[3]=r,y[4]=n,y[5]=o,y[6]=s,y[7]=a,y[8]=h,y[9]=c,y[10]=u,y[11]=l,y[12]=p,y[13]=f,y[14]=d,y[15]=m,this},t.prototype.identity=function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},t.prototype.transponse=function(t){var e=t.elements;return this.set(e[0],e[4],e[8],e[12],e[1],e[5],e[9],e[13],e[2],e[6],e[10],e[14],e[3],e[7],e[11],e[15]),this},t.prototype.multiply=function(t,e){var i=t.elements,r=e.elements,n=this.elements,o=i[0],s=i[4],a=i[8],h=i[12],c=i[1],u=i[5],l=i[9],p=i[13],f=i[2],d=i[6],m=i[10],y=i[14],v=i[3],g=i[7],x=i[11],_=i[15],w=r[0],b=r[4],I=r[8],R=r[12],A=r[1],O=r[5],E=r[9],T=r[13],P=r[2],M=r[6],U=r[10],C=r[14],D=r[3],L=r[7],N=r[11],z=r[15];return n[0]=o*w+s*A+a*P+h*D,n[4]=o*b+s*O+a*M+h*L,n[8]=o*I+s*E+a*U+h*N,n[12]=o*R+s*T+a*C+h*z,n[1]=c*w+u*A+l*P+p*D,n[5]=c*b+u*O+l*M+p*L,n[9]=c*I+u*E+l*U+p*N,n[13]=c*R+u*T+l*C+p*z,n[2]=f*w+d*A+m*P+y*D,n[6]=f*b+d*O+m*M+y*L,n[10]=f*I+d*E+m*U+y*N,n[14]=f*R+d*T+m*C+y*z,n[3]=v*w+g*A+x*P+_*D,n[7]=v*b+g*O+x*M+_*L,n[11]=v*I+g*E+x*U+_*N,n[15]=v*R+g*T+x*C+_*z,this},t.prototype.translate=function(t,e,i){return r.set(1,0,0,0,0,1,0,0,0,0,1,0,t,e,i,1),this.multiply(this,r)},t.prototype.xRotate=function(t){var e=Math.cos(t),i=Math.sin(t);return r.set(1,0,0,0,0,e,i,0,0,-i,e,0,0,0,0,1),this.multiply(this,r)},t.prototype.yRotate=function(t){var e=Math.cos(t),i=Math.sin(t);return r.set(e,0,-i,0,0,1,0,0,i,0,e,0,0,0,0,1),this.multiply(this,r)},t.prototype.zRotate=function(t){var e=Math.cos(t),i=Math.sin(t);return r.set(e,i,0,0,-i,e,0,0,0,0,1,0,0,0,0,1),this.multiply(this,r)},t.prototype.scale=function(t,e,i){return r.set(t,0,0,0,0,e,0,0,0,0,i,0,0,0,0,1),this.multiply(this,r)},t.prototype.inverse=function(t){var e=this.elements,i=t.elements,r=i[0],n=i[1],o=i[2],s=i[3],a=i[4],h=i[5],c=i[6],u=i[7],l=i[8],p=i[9],f=i[10],d=i[11],m=i[12],y=i[13],v=i[14],g=i[15],x=p*v*u-y*f*u+y*c*d-h*v*d-p*c*g+h*f*g,_=m*f*u-l*v*u-m*c*d+a*v*d+l*c*g-a*f*g,w=l*y*u-m*p*u+m*h*d-a*y*d-l*h*g+a*p*g,b=m*p*c-l*y*c-m*h*f+a*y*f+l*h*v-a*p*v,I=r*x+n*_+o*w+s*b;if(0===I)return console.log("Matrix4: .inverse() can't invert matrix, determinant is 0"),this.identity();var R=1/I;return e[0]=x*R,e[1]=(y*f*s-p*v*s-y*o*d+n*v*d+p*o*g-n*f*g)*R,e[2]=(h*v*s-y*c*s+y*o*u-n*v*u-h*o*g+n*c*g)*R,e[3]=(p*c*s-h*f*s-p*o*u+n*f*u+h*o*d-n*c*d)*R,e[4]=_*R,e[5]=(l*v*s-m*f*s+m*o*d-r*v*d-l*o*g+r*f*g)*R,e[6]=(m*c*s-a*v*s-m*o*u+r*v*u+a*o*g-r*c*g)*R,e[7]=(a*f*s-l*c*s+l*o*u-r*f*u-a*o*d+r*c*d)*R,e[8]=w*R,e[9]=(m*p*s-l*y*s-m*n*d+r*y*d+l*n*g-r*p*g)*R,e[10]=(a*y*s-m*h*s+m*n*u-r*y*u-a*n*g+r*h*g)*R,e[11]=(l*h*s-a*p*s-l*n*u+r*p*u+a*n*d-r*h*d)*R,e[12]=b*R,e[13]=(l*y*o-m*p*o+m*n*f-r*y*f-l*n*v+r*p*v)*R,e[14]=(m*h*o-a*y*o-m*n*c+r*y*c+a*n*v-r*h*v)*R,e[15]=(a*p*o-l*h*o+l*n*c-r*p*c-a*n*f+r*h*f)*R,this},t.prototype.compose=function(t,e,i){var r=this.elements,n=e.x,o=e.y,s=e.z,a=e.w,h=n+n,c=o+o,u=s+s,l=n*h,p=n*c,f=n*u,d=o*c,m=o*u,y=s*u,v=a*h,g=a*c,x=a*u,_=i.x,w=i.y,b=i.z;return r[0]=(1-(d+y))*_,r[1]=(p+x)*_,r[2]=(f-g)*_,r[3]=0,r[4]=(p-x)*w,r[5]=(1-(l+y))*w,r[6]=(m+v)*w,r[7]=0,r[8]=(f+g)*b,r[9]=(m-v)*b,r[10]=(1-(l+d))*b,r[11]=0,r[12]=t.x,r[13]=t.y,r[14]=t.z,r[15]=1,this},t.prototype.setFromQuaternion=function(t){return this.compose(h,t,c)},t.prototype.lookAt=function(t,e,i){var r=o.copy(t),n=s.copy(i),h=r.subtract(e).normalize(),c=n.cross(h).normalize(),u=a.copy(h).cross(c).normalize();return this.set(c.x,c.y,c.z,0,u.x,u.y,u.z,0,h.x,h.y,h.z,0,t.x,t.y,t.z,1),this},t.prototype.setPerspective=function(t,e,i,r){var n=t*Math.PI/180,o=Math.tan(.5*Math.PI-.5*n),s=1/(i-r);return this.set(o/e,0,0,0,0,o,0,0,0,0,(i+r)*s,-1,0,0,2*i*r*s,0)},t.prototype.setOrthographic=function(t,e,i,r,n,o){return this.set(2/(e-t),0,0,0,0,2/(r-i),0,0,0,0,2/(n-o),0,(t+e)/(t-e),(i+r)/(i-r),(n+o)/(n-o),1)},t.prototype.copy=function(t){var e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],e[9]=i[9],e[10]=i[10],e[11]=i[11],e[12]=i[12],e[13]=i[13],e[14]=i[14],e[15]=i[15],this},t.prototype.clone=function(){return(new t).copy(this)},t}();e.Matrix4=u,r=new u},450:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=i(236),n=function(){function t(t,e){this.normal=t||new r.Vector3(1,0,0),this.constant=e||0}return t.prototype.set=function(t,e){return this.normal.copy(t),this.constant=e,this},t.prototype.setComponents=function(t,e,i,r){return this.normal.set(t,e,i),this.constant=r,this},t.prototype.normalize=function(){var t=1/this.normal.mag();return this.normal.multiply(t),this.constant*=t,this},t.prototype.negate=function(){return this.normal.multiply(-1),this.constant*=-1,this},t.prototype.distanceToPoint=function(t){return this.normal.dot(t)+this.constant},t.prototype.intersectsBox=function(t){return t.intersectsPlane(this)},t.prototype.copy=function(t){return this.normal.copy(t.normal),this.constant=t.constant,this},t.prototype.clone=function(){return new t(this.normal.clone(),this.constant)},t}();e.Plane=n},517:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=i(522),n=function(){function t(t,e,i,r){this.x=t||0,this.y=e||0,this.z=i||0,this.w=r||1}return t.prototype.conjugate=function(t){return this.x*=-t.x,this.y*=-t.y,this.z*=-t.z,this},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w+this.w)},t.prototype.normalize=function(){var t=this.length();return 0===t?(this.x=0,this.y=0,this.z=0,this.w=1):(t=1/t,this.x=this.x*t,this.y=this.y*t,this.z=this.z*t,this.w=this.w*t),this},t.prototype.setFromAxisAngle=function(t,e){t.normalize();var i=e/2,r=Math.sin(i);return this.x=t.x*r,this.y=t.y*r,this.z=t.z*r,this.w=Math.cos(i),this},t.prototype.setFromEuler=function(t){return t.toQuaternion(this),this},t.prototype.angleTo=function(t){return 2*Math.acos(Math.abs(r.MathUtils.clamp(this.dot(t),-1,1)))},t.prototype.multiply=function(t,e){var i=t.x,r=t.y,n=t.z,o=t.w,s=e.x,a=e.y,h=e.z,c=e.w;return this.x=i*c+o*s+r*h-n*a,this.y=r*c+o*a+n*s-i*h,this.z=n*c+o*h+i*a-r*s,this.w=o*c-i*s-r*a-n*h,this},t.prototype.slerp=function(t,e){if(0===e)return this;if(1===e)return this.copy(t);var i=this.x,r=this.y,n=this.z,o=this.w,s=o*t.w+i*t.x+r*t.y+n*t.z;if(s<0?(this.x=-t.x,this.y=-t.y,this.z=-t.z,this.w=-t.w,s=-s):this.copy(t),s>=1)return this.w=o,this.x=i,this.y=r,this.z=n,this;var a=1-s*s;if(a<=Number.EPSILON){var h=1-e;return this.w=h*o+e*this.w,this.x=h*i+e*this.x,this.y=h*r+e*this.y,this.z=h*n+e*this.z,this.normalize(),this}var c=Math.sqrt(a),u=Math.atan2(c,s),l=Math.sin((1-e)*u)/c,p=Math.sin(e*u)/c;return this.w=o*l+this.w*p,this.x=i*l+this.x*p,this.y=r*l+this.y*p,this.z=n*l+this.z*p,this},t.prototype.rotateTowards=function(t,e){var i=this.angleTo(t);if(0===i)return this;var r=Math.min(1,e/i);return this.slerp(t,r),this},t.prototype.equals=function(t,e){var i=void 0!==e?e:0;return i<0&&(i*=-1),Math.abs(this.x-t.x)<i&&Math.abs(this.y-t.y)<i&&Math.abs(this.z-t.z)<i&&Math.abs(this.w-t.w)<i},t.prototype.copy=function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.z,this},t.prototype.clone=function(){return(new t).copy(this)},t}();e.Quaternion=n},236:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=new(i(517).Quaternion),n=function(){function t(t,e,i){this.x=void 0!==t?t:0,this.y=void 0!==e?e:0,this.z=void 0!==i?i:0}return t.prototype.set=function(t,e,i){return this.x=t,this.y=e,this.z=i,this},t.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this},t.prototype.subtract=function(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this},t.prototype.divide=function(t){return 0===t&&console.warn("Vector3: divide(), Can't divide with a zero."),this.x/=t,this.y/=t,this.z/=t,this},t.prototype.inverse=function(t){return this.x=-t.x,this.y=-t.y,this.z=-t.z,this},t.prototype.min=function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this},t.prototype.max=function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this},t.prototype.multiply=function(t){return this.x*=t,this.y*=t,this.z*=t,this},t.prototype.magSq=function(){var t=this.x,e=this.y,i=this.z;return t*t+e*e+i*i},t.prototype.mag=function(){return Math.sqrt(this.magSq())},t.prototype.normalize=function(){return this.divide(this.mag())},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y+this.z*t.z},t.prototype.cross=function(t,e){var i=this.y*t.z-this.z*t.y,r=this.z*t.x-this.x*t.z,n=this.x*t.y-this.y*t.x;return void 0!==e?e.set(i,r,n):this.set(i,r,n)},t.prototype.applyQuaternion=function(t){var e=this.x,i=this.y,r=this.z,n=t.x,o=t.y,s=t.z,a=t.w,h=a*e+o*r-s*i,c=a*i+s*e-n*r,u=a*r+n*i-o*e,l=-n*e-o*i-s*r;return this.x=h*a+l*-n+c*-s-u*-o,this.y=c*a+l*-o+u*-n-h*-s,this.z=u*a+l*-s+h*-o-c*-n,this},t.prototype.applyAxisAngle=function(t,e){return this.applyQuaternion(r.setFromAxisAngle(t,e))},t.prototype.applyMatrix4=function(t){var e=this.x,i=this.y,r=this.z,n=t.elements,o=1/(n[3]*e+n[7]*i+n[11]*r+n[15]);return this.x=(n[0]*e+n[4]*i+n[8]*r+n[12])*o,this.y=(n[1]*e+n[5]*i+n[9]*r+n[13])*o,this.z=(n[2]*e+n[6]*i+n[10]*r+n[14])*o,this},t.prototype.equals=function(t,e){var i=void 0!==e?e:0;return Math.abs(this.x-t.x)<i&&Math.abs(this.y-t.y)<i&&Math.abs(this.z-t.z)<i},t.prototype.copy=function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this},t.prototype.clone=function(){return(new t).copy(this)},t}();e.Vector3=n},566:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=i(861),n=function(){function t(t){this.mesh=t,this.box=new r.Box,this.positionsNeedsUpdate=!0}return t.prototype.uptadePositions=function(){var t=this.mesh.geometry.getPositions();this.box.setFromPositions(t),this.positionsNeedsUpdate=!1},t}();e.BoundingBox=n},636:function(t,e,i){var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var o=i(319),s=i(566),a=function(t){function e(e,i){var r=t.call(this)||this;return r.geometry=e,r.material=i,r.boundingBox=new s.BoundingBox(r),r.children=[],r._renderItem,r}return n(e,t),e.prototype.addChild=function(t){this.children.every((function(e){return t.id!==e.id}))&&this.children.push(t)},e.prototype.clone=function(){var t=new e(this.geometry,this.material);return t._clonedFrom=this,t},e.prototype._onRotationChangeCallback=function(){this.worldMatrixNeedsUpdate=!0},e}(o.Object3D);e.Mesh=a},319:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=i(236),n=i(517),o=i(481),s=i(347),a=0,h=new n.Quaternion,c=new r.Vector3,u=new r.Vector3(0,0,-1),l=new r.Vector3(1,0,0),p=new r.Vector3(0,1,0),f=new r.Vector3(0,0,1),d=function(){function t(){this.name="Object no. "+a,this.id=a++,this.position=new r.Vector3(0,0,0),this.rotation=new o.Euler(0,0,0),this.quaternion=new n.Quaternion(0,0,0,1),this.scale=new r.Vector3(1,1,1),this.worldMatrix=new s.Matrix4,this.isObject3D=!0,this.worldMatrixNeedsUpdate=!0,this.isInFrustum=!1,this.isMesh=!1,this.isCamera=!1}return t.prototype.updateWorldMatrix=function(){var t=this.worldMatrix,e=this.position,i=this.scale;this.quaternion.setFromEuler(this.rotation),t.compose(e,this.quaternion,i),this.worldMatrixNeedsUpdate=!1},t.prototype.applyQuaternion=function(t){return this.quaternion.multiply(this.quaternion,t),this},t.prototype.translateX=function(t){return this.position.x+=t,this},t.prototype.translateY=function(t){return this.position.y+=t,this},t.prototype.translateZ=function(t){return this.position.z+=t,this},t.prototype.translate=function(t){return this.position.add(t),this._onPositionChangeCallBack(),this},t.prototype.applyScale=function(t){return this.scale.multiply(t),this._onRotationChangeCallback(),this},t.prototype.getDirection=function(){return c.copy(u).applyQuaternion(this.quaternion)},t.prototype.rotateOnAxis=function(t,e){return h.setFromAxisAngle(t,e),this.quaternion.multiply(h,this.quaternion),this._onRotationChangeCallback(),this},t.prototype.rotateX=function(t){this.rotation.x+=t,this.rotateOnAxis(l,t),this._onRotationChangeCallback()},t.prototype.rotateY=function(t){this.rotation.y+=t,this.rotateOnAxis(p,t),this._onRotationChangeCallback()},t.prototype.rotateZ=function(t){this.rotation.z+=t,this.rotateOnAxis(f,t),this._onRotationChangeCallback()},t.prototype.rotate=function(t){var e=t.x,i=t.y,r=t.z;0!==e&&this.rotateX(t.x),0!==i&&this.rotateY(t.y),0!==r&&this.rotateZ(t.z)},t.prototype.checkIfUpdateWorldMatrix=function(){this.worldMatrixNeedsUpdate&&this.updateWorldMatrix()},t.prototype.checkIsInFrustum=function(t){var e=t.viewFrustum.intersectsObject(this);this.isInFrustum=e},t.prototype._onPositionChangeCallBack=function(){this.worldMatrixNeedsUpdate=!0},t.prototype._onRotationChangeCallback=function(){this.worldMatrixNeedsUpdate=!0},t.prototype._onScaleChangeCallback=function(){this.worldMatrixNeedsUpdate=!0},t.prototype.destroy=function(){},t}();e.Object3D=d},434:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=i(563),n=i(41),o=i(487),s=i(825),a=i(196),h=i(103),c=i(347),u=i(253),l=i(486),p=i(14),f=i(337),d=i(234),m=new c.Matrix4,y=[37,37,37,255].map((function(t){return t/255})),v=function(){function t(t){this.canvas,this.inspector=t&&t.inspector?new n.Inspector:void 0,this.gl,this.programManager=new o.ProgramManager(this),this.readyForRendering=!1,this.stopRenderLoopGiven=!1,this.clearBeforeRender=!(!t||!t.clearBeforeRender)&&t.clearBeforeRender,this.antialias=!t||!t.antialiazing||t.antialiazing,this.pixelRatio=t&&t.pixelRatio?t.pixelRatio:1,this.previousTime=0}return t.prototype.attachTo=function(t){var e=new r.CanvasManager(this.pixelRatio,t);void 0!==this.inspector&&this.inspector._init(e);var i={alpha:!0,antialias:this.antialias,premultipliedAlpha:!1,preserveDrawingBuffer:!1},n=s.WebGLUtils.getWebGLObject(e.element,i);return n?n instanceof WebGL2RenderingContext&&(s.WebGLUtils.setupGL(n),l.UBO.create(n,"Transform",0,[new p.Uniform("world","mat4"),new p.Uniform("worldViewProjection","mat4"),new p.Uniform("worldInverseTranspose","mat4")]),l.UBO.create(n,"Material",1,[new p.Uniform("matAmbient","vec3"),new p.Uniform("matDiffuse","vec3"),new p.Uniform("matSpecular","vec4")]),l.UBO.create(n,"Light",2,[new p.Uniform("lightAmbient","vec3"),new p.Uniform("lightDiffuse","vec3"),new p.Uniform("lightSpecular","vec3")]),this.canvas=e,this.gl=n,!0):(console.error("Error in WebGLRenderer.attachTo()"),e.destroy(),!1)},t.prototype.render=function(t){var e=this,i=this.canvas;if(void 0!==i){i.interactionManager.updateScene(t),i.didAspectUpdate&&(t.setAspectToActiveCamera(i.aspect),i.didAspectUpdate=!1),t.onBeforeRender(),void 0!==this.inspector&&this.inspector.sceneUpdate(t);var r=this.gl;if(r){r.viewport(0,0,r.canvas.width,r.canvas.height);var n=y;r.clearColor(n[0],n[1],n[2],n[3]),r.clear(r.COLOR_BUFFER_BIT|r.DEPTH_BUFFER_BIT),a.RenderList.checkIfUpdate(r,this.programManager,t),t.buffersNeedUpdate&&t.renderLists.forEach((function(t){t.items.forEach((function(t){var e=t.geometry;e.setBuffers(r),e.bindBuffers(r,t.program)}))})),t.renderLists.forEach((function(i){r.useProgram(i.program.WebGLProgram),l.UBO.cache.Transform.update("worldViewProjection",t.viewProjectionMatrix.elements),i.items.forEach((function(i){i.mesh.isInFrustum&&e.renderItem(r,i,t)})),i.program.unBindVAO(r),r.useProgram(null)})),void 0!==t.helperManager&&this.renderHelpers(r,t,t.helperManager),t.onAfterRender()}else console.error("VALO.WebGLRenderer: gl object is "+r)}},t.prototype.renderItem=function(t,e,i){var r=e.mesh,n=e.geometry,o=e.material,s=e.program;if(null!==i.activeCamera){var a=l.UBO.cache.Transform;if(a.update("world",r.worldMatrix.elements),o instanceof d.Color)s.preRender("u_color",o.color);else if(o instanceof u.StandardMaterial){m.inverse(r.worldMatrix),m.transponse(m),a.update("worldInverseTranspose",m.elements);var c=l.UBO.cache.Material;if(c.update("matAmbient",o.ambient),c.update("matDiffuse",o.diffuse),c.update("matSpecular",[o.specular.x,o.specular.y,o.specular.z,o.shininess]),1===f.Light.cache.amount){var p=f.Light.cache.arr[0],y=l.UBO.cache.Light;y.update("lightAmbient",p.ambient),y.update("lightDiffuse",p.diffuse),y.update("lightSpecular",p.specular),s.preRender("u_reverseLightDirection",p.reverseDirection)}s.preRender("u_viewPosition",i.activeCamera.position)}var v=t.TRIANGLES,g=n.attributes[h.ATTRIBUTE_LOCATION.INDICES];s.bindVAO(t,n);var x=0;g.array?(x=g.array.length,t.drawElements(v,x,t.UNSIGNED_SHORT,0)):(x=n.amountOfVertices,t.drawArrays(v,0,x))}},t.prototype.renderHelpers=function(t,e,i){var r=i.boxes;if(null!==r){this.programManager.setHelperBoxProgram(t);var n=this.programManager.helperBoxProgram;if(!n)return void console.error("VALO.WebGLRenderer: renderBoundingBox() no program created succesfully");r.forEach((function(i){var r=i.geometry;i.geometry.hasPositions||i.setGeometry(),r.isBuffersSet||(r.setBuffers(t),r.bindBuffers(t,n)),t.useProgram(n.WebGLProgram);var o=i.geometry.vao;if(o){l.UBO.cache.Transform.update("worldViewProjection",e.viewProjectionMatrix.elements);var s=r.attributes[h.ATTRIBUTE_LOCATION.INDICES];t.bindVertexArray(o),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,s.buffer),t.drawElements(t.LINES,24,t.UNSIGNED_SHORT,0)}else console.error("BoundingBox has no VerexArrayObject")}))}},t.prototype.runRenderLoop=function(t){var e=this;window.requestAnimationFrame((function(){t(),e.stopRenderLoopGiven||e.runRenderLoop(t)}))},t.prototype.destroy=function(){},t}();e.WebGLRenderer=v},40:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=i(486),n=i(103),o=i(236),s=function(){function t(t,e,i){this.gl=t,this.WebGLProgram=e,this.uniforms={},this.A_POSITION=-1,this.A_NORMAL=-1,this.targetMaterial=i,this._bindedGeometryId=-1}return t.prototype.bindVAO=function(t,e){if(e.id!==this._bindedGeometryId){var i=e.attributes,r=e.vao,o=i[n.ATTRIBUTE_LOCATION.INDICES];r?(t.bindVertexArray(r),o.array&&t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,o.buffer),this._bindedGeometryId=e.id):console.error("VALO.Mesh: renderItem() has no VerexArrayObject")}},t.prototype.unBindVAO=function(t){t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),t.bindVertexArray(null),this._bindedGeometryId=-1},t.prototype.prepareUniforms=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(t.length%2==0)for(var i=this.gl,r=this.WebGLProgram,n=0,o=0;o<t.length;o+=2)null!==(n=i.getUniformLocation(r,t[o]))&&(this.uniforms[t[o]]={location:n,type:t[o+1]});else console.error("Invalid lenght of arguments")},t.prototype.prepareUniformBlocks=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(t.length%2==0)for(var i=this.gl,n=this.WebGLProgram,o=0;o<t.length;o+=2){var s=t[o+1],a=t[o];"number"==typeof s&&a instanceof r.UBO&&i.uniformBlockBinding(n,s,a.blockPoint)}else console.error("Invalid lenght of arguments")},t.prototype.setUniforms=function(t){if(t.length%2!=0)return console.error("Invalid lenght of arguments"),this;for(var e,i="",r=0;r<t.length;r+=2){var n=t[r],s=t[r+1];if("string"==typeof n&&(i=n),s instanceof Array?e=s:s instanceof o.Vector3&&(e=[s.x,s.y,s.z]),void 0===this.uniforms[i]||void 0===e)return console.log("uniform not found "+i),this;switch(this.uniforms[i].type){case"vec2":this.gl.uniform2fv(this.uniforms[i].location,new Float32Array);break;case"vec3":this.gl.uniform3fv(this.uniforms[i].location,new Float32Array(e));break;case"vec4":this.gl.uniform4fv(this.uniforms[i].location,new Float32Array(e));break;case"mat4":this.gl.uniformMatrix4fv(this.uniforms[i].location,!1,e);break;default:console.log("unknown uniform type for "+i)}}return this},t.prototype.preRender=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return t.length>0&&this.setUniforms(t),this},t.prototype.setAttribLocations=function(t,e){var i=this.WebGLProgram,r=t.getAttribLocation(i,"a_position");if(this.A_POSITION=r,e){var n=t.getAttribLocation(i,"a_normal");this.A_NORMAL=n}},t.prototype.destroy=function(){this.gl.getParameter(this.gl.CURRENT_PROGRAM)===this.WebGLProgram&&this.gl.useProgram(null),this.gl.deleteProgram(this.WebGLProgram)},t}();e.Program=s},487:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=i(40),n=i(825),o=i(905),s=i(253),a=i(486),h=i(234),c=function(){function t(t){this.renderer=t,this.programs=[],this.helperBoxProgram=null}return t.prototype.programAndMeshMatches=function(t,e){return e.geometry?t.targetMaterial===e.material.type:(console.error("Mesh doesn't have geometry"),!1)},t.prototype.createProgramForMesh=function(t){var e=null,i=this.renderer.gl;if(i){var c,u,l=t.geometry.hasNormals;if(t.material instanceof h.Color?(c=["#version 300 es","precision mediump float;","in vec4 a_position;","uniform Transform{","mat4 world;","mat4 worldViewProjection;","};","void main() {","gl_Position = worldViewProjection * world * a_position;","}"].join("\n"),u=["#version 300 es","precision mediump float;","uniform vec4 u_color;","out vec4 outColor;","void main() {","outColor = u_color;","}"].join("\n")):t.material instanceof o.NaiveMaterial?(c=["#version 300 es","precision mediump float;","in vec4 a_position;",l?"in vec3 a_normal;":"",l?"out vec3 v_normal;":"","uniform Transform{","mat4 world;","mat4 worldViewProjection;","};","void main() {","gl_Position = worldViewProjection * world * a_position;",l?"v_normal = mat3(u_world) * a_normal;":"","}"].join("\n"),u=["#version 300 es","precision mediump float;",l?"in vec3 v_normal;":"",l?"uniform vec3 u_reverseLightDirection;":"","uniform vec4 u_color;","out vec4 outColor;","void main() {",l?"vec3 normal = normalize(v_normal);":"",l?"float light = dot(normal, u_reverseLightDirection);":"","outColor = u_color;",l?"outColor.rgb *= light;":"","}"].join("\n")):t.material instanceof s.StandardMaterial&&l&&(c=["#version 300 es","precision mediump float;","in vec4 a_position;","in vec3 a_normal;","uniform Transform{","mat4 world;","mat4 worldViewProjection;","mat4 worldInverseTranspose;","};","uniform vec3 u_reverseLightDirection;","uniform vec3 u_viewPosition;","out vec3 v_surfaceToLight;","out vec3 v_surfaceToView;","out vec3 v_normal;","void main() {","vec3 surfaceWorldPosition = (world * a_position).xyz;","v_surfaceToLight = u_reverseLightDirection;","v_surfaceToView = u_viewPosition - surfaceWorldPosition;","v_normal = mat3(worldInverseTranspose) * a_normal;","gl_Position = worldViewProjection * world * a_position;","}"].join("\n"),u=["#version 300 es","precision mediump float;","in vec3 v_normal;","in vec3 v_surfaceToLight;","in vec3 v_surfaceToView;","uniform Material {","vec3 matAmbient;","vec3 matDiffuse;","vec4 matSpecular;","};","uniform Light {","vec3 lightAmbient;","vec3 lightDiffuse;","vec3 lightSpecular;","};","out vec4 outColor;","void main() {","vec3 normal = normalize(v_normal);","vec3 viewDir = normalize(v_surfaceToView);","vec3 lightDir = normalize(v_surfaceToLight);","vec3 ambient = lightAmbient * matAmbient;","float diff = max(dot(normal, lightDir), 0.0);","vec3 diffuse = lightDiffuse * (diff * matDiffuse);","float shininess = matSpecular.w;","vec3 reflectDir = reflect(-lightDir, normal);","float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);","vec3 specular = lightSpecular * (spec * matSpecular.xyz);","vec3 result = ambient + diffuse + specular;","outColor = vec4(result, 1.0) * 1.5;","}"].join("\n")),void 0!==c&&void 0!==u){var p=n.WebGLUtils.createShaderProgramFromScripts(i,c,u);if(p)return(e=new r.Program(i,p,t.material.type)).prepareUniformBlocks(a.UBO.cache.Transform,0),t.material instanceof h.Color?(e.setAttribLocations(i,!1),e.prepareUniforms("u_color","vec4")):t.material instanceof s.StandardMaterial&&(e.setAttribLocations(i,!0),e.prepareUniformBlocks(a.UBO.cache.Material,1,a.UBO.cache.Light,2),e.prepareUniforms("u_reverseLightDirection","vec3","u_viewPosition","vec3")),this.programs.push(e),e;console.error("ProgramManger.figureProgram();")}else console.error("Incorrect material type OR normals missing")}},t.prototype.setHelperBoxProgram=function(t){if(!this.helperBoxProgram){var e=["#version 300 es","in vec4 a_position;","uniform Transform{","mat4 world;","mat4 worldViewProjection;","mat4 worldInverseTranspose;","};","void main() {","gl_Position = worldViewProjection * a_position;","}"].join("\n"),i=["#version 300 es","precision mediump float;","out vec4 outColor;","void main() {","outColor = vec4("+[.5,.5,.5,1].join(", ")+");","}"].join("\n"),o=n.WebGLUtils.createShaderProgramFromScripts(t,e,i);if(o){var s=new r.Program(t,o,"helper");s.setAttribLocations(t,!1),s.prepareUniforms("u_worldViewProjection","mat4"),this.helperBoxProgram=s}else console.error("ProgramManger.figureProgram();")}},t}();e.ProgramManager=c},196:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t){this.program=t,this.items=[]}return t.prototype.push=function(t){var e={id:t.id,mesh:t,material:t.material,geometry:t.geometry,program:this.program};t._renderItem=e,this.items.push(e)},t.checkIfUpdate=function(e,i,r){if(r.meshListDidUpdate){var n=[];r.meshes.forEach((function(t){void 0===t._renderItem&&n.push(t)})),n.forEach((function(e){var n=r.renderLists.find((function(t){return t.program.targetMaterial==e.material.type}));if(void 0!==n)n.push(e);else{var o=i.createProgramForMesh(e);if(!o)return void console.error("VALO.RenderList: checkIfUpdate() program was not complied correctly");var s=new t(o);s.push(e),r.renderLists.push(s)}}))}},t.prototype.delete=function(t){console.log("tried to delete object",t)},t.prototype.destroy=function(){},t}();e.RenderList=i},486:function(t,e){var i=this&&this.__spreadArrays||function(){for(var t=0,e=0,i=arguments.length;e<i;e++)t+=arguments[e].length;var r=Array(t),n=0;for(e=0;e<i;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,n++)r[n]=o[s];return r};Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e,i,r,n){this.items={},this.keys=[];for(var o=0;o<n.length;o++)this.items[n[o].name]=n[o],this.keys[o]=n[o].name;this.gl=t,this.name=e,this.blockPoint=i,this.buffer=t.createBuffer(),t.bindBuffer(t.UNIFORM_BUFFER,this.buffer),t.bufferData(t.UNIFORM_BUFFER,r,t.DYNAMIC_DRAW),t.bindBuffer(t.UNIFORM_BUFFER,null),t.bindBufferBase(t.UNIFORM_BUFFER,i,this.buffer)}return t.prototype.update=function(t,e){var i=this.items[t],r=i.updateAry(e),n=i.offset;return this.gl.bindBuffer(this.gl.UNIFORM_BUFFER,this.buffer),this.gl.bufferSubData(this.gl.UNIFORM_BUFFER,n,r,0),this.gl.bindBuffer(this.gl.UNIFORM_BUFFER,null),this},t.create=function(e,r,n,o){var s=i(o),a=t.calculate(s);t.cache[r]=new t(e,r,n,a,s)},t.getSize=function(t){switch(t){case"mat4":return 64;case"mat3":return 48;case"vec2":return 8;case"f":case"i":case"b":return 4;case"vec3":case"vec4":return 16;default:return 0}},t.calculate=function(e){for(var i=16,r=0,n=0,o=0,s=0;s<e.length;s++)(r=i-(o=e[s].arylen&&0!=e[s].arylen?16*e[s].arylen:t.getSize(e[s].type)))<0&&i<16?(n+=i,s>0&&(e[s-1].chunkLen+=i),i=16):r<0&&16==i||(0==r?i=16:i-=o),e[s].offset=n,e[s].chunkLen=o,e[s].dataLen=o,n+=o;return n%16!=0&&(e[e.length-1].chunkLen+=i,n+=i),n},t}();e.UBO=r,r.cache={}},14:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=i(236),n=function(){function t(e,i){this.name=e,this.type=i,this.offset=0,this.dataLen=0,this.chunkLen=0,this.arylen=0,this.arr=new Float32Array(t.getSize(i)).fill(0)}return t.prototype.updateAry=function(t){if(t instanceof r.Vector3)this.arr[0]=t.x,this.arr[1]=t.y,this.arr[2]=t.z;else if(Array.isArray(t))for(var e=0;e<t.length;e++)this.arr[e]=t[e];else this.arr[0]=t;return this.arr},t.getSize=function(t){switch(t){case"mat4":case"mat3":return 16;case"vec2":return 2;case"f":case"i":case"b":return 1;case"vec3":case"vec4":return 4;default:return 0}},t}();e.Uniform=n},825:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=[1,1,1,1],r=function(){function t(){}return t.setupGL=function(t,e){var r=e||i,n=r[3];t.clearColor(r[0],r[1],r[2],n),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT),t.enable(t.DEPTH_TEST),t.enable(t.CULL_FACE),t.cullFace(t.FRONT)},t.getRenderingContext=function(){if(window.WebGL2RenderingContext)return"webgl2";if(window.WebGLRenderingContext)return"webgl";var t=document.createElement("canvas");try{if(t.getContext("experimental-webgl"))return"experimental-webgl"}catch(t){console.log(t),window.alert("Your browser does not support WegGL!\nPlease use Chrome or Firefox if you want to see all the features.")}return""},t.getWebGLObject=function(e,i){var r,n=t.getRenderingContext();return""===n?null:(e&&(r=e.getContext(n,i)),r instanceof WebGL2RenderingContext||r instanceof WebGLRenderingContext?r:null)},t.createShaderProgramFromScripts=function(t,e,i){var r=t.createShader(t.VERTEX_SHADER);if(!r)return null;t.shaderSource(r,e);var n=t.createShader(t.FRAGMENT_SHADER);if(!n)return null;if(t.shaderSource(n,i),t.compileShader(r),!t.getShaderParameter(r,t.COMPILE_STATUS))return console.error("ERROR compiling vertex shader!",t.getShaderInfoLog(r)),null;if(t.compileShader(n),!t.getShaderParameter(n,t.COMPILE_STATUS))return console.error("ERROR compiling fragment shader!",t.getShaderInfoLog(n)),null;var o=t.createProgram();return o?(t.attachShader(o,r),t.attachShader(o,n),t.linkProgram(o),t.getProgramParameter(o,t.LINK_STATUS)||console.error("ERROR linking program!",t.getProgramInfoLog(o)),o):null},t}();e.WebGLUtils=r},595:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=i(347),n=i(707),o=i(238),s=i(636),a=0,h=function(){function t(){this.id=a++,this.meshes=[],this.cameras=[],this.activeCamera=null,this.viewProjectionMatrix=new r.Matrix4,this.viewFrustum=new o.Frustum,this.viewMatrixNeedsUpdate=!0,this.renderLists=[],this.meshListDidUpdate=!1,this.buffersNeedUpdate=!1}return t.prototype.add=function(t){t instanceof n.Camera?this.cameras.push(t):t instanceof s.Mesh&&this.addMesh(t)},t.prototype.addMesh=function(t){this.meshes.includes(t)||(this.meshes.push(t),this._onListUpdate())},t.prototype.deleteMesh=function(t){var e=this.meshes.indexOf(t);-1!==e&&(this.meshes.splice(e,1),console.error("Deleting mesh from render lists is not yet possible"),this._onListUpdate())},t.prototype.updateProjectionView=function(t){this.viewProjectionMatrix.multiply(t.perspective,t.inverseWorldMatrix),this.viewFrustum.setFromProjectionMatrix(this.viewProjectionMatrix)},t.prototype.setAspectToActiveCamera=function(t){this.activeCamera&&this.activeCamera.setAspect(t)},t.prototype.onBeforeRender=function(){var t=this,e=this.activeCamera;e&&(e.perspectiveNeedsUpdate&&e.updatePerspective(),e.worldMatrixNeedsUpdate&&e.updateWorldMatrix(),this.viewMatrixNeedsUpdate&&this.updateProjectionView(e)),this.meshes.forEach((function(t){t.boundingBox.positionsNeedsUpdate&&t.boundingBox.uptadePositions()})),this.meshes.forEach((function(t){return t.updateWorldMatrix()})),this.meshes.forEach((function(e){return e.checkIsInFrustum(t)}))},t.prototype.onAfterRender=function(){this.meshListDidUpdate=!1,this.buffersNeedUpdate=!1},t.prototype._onListUpdate=function(){this.meshListDidUpdate=!0,this.buffersNeedUpdate=!0},t.prototype.destroy=function(){this.meshes.forEach((function(t){return t.destroy()}))},t}();e.Scene=h},33:(t,e,i)=>{i.r(e),i.d(e,{VALO2D:()=>v});class r{constructor(t,e){this.divID=t,this.options=e,this.element,this.elementId="scene",this.width=this.options.width,this.height=this.options.height,this.backgroundColor=this.options.backgroundColor,this.pixelRatio=window.devicePixelRatio,this.autoResize=this.options.autoResize,this.clearBeforeRender=this.options.clearBeforeRender,this.preserveDrawingBuffer=this.options.preserveDrawingBuffer,this.transparent=this.options.transparent,this.resizeFunction=null,this.init()}init(){if(this.createCanvas(this.divID),this.autoResize){const t=()=>this.resize(this);window.addEventListener("resize",t),this.resizeFunction=t}}createCanvas(t){this.autoResize&&this.adjustToTheParent(),this.element=document.createElement("canvas"),this.element.setAttribute("id",this.elementId),this.element.width=this.width*this.pixelRatio,this.element.height=this.height*this.pixelRatio,t?document.getElementById(t).appendChild(this.element):document.body.appendChild(this.element),this.addStyles()}addStyles(){const t=document.createElement("style");document.head.appendChild(t);const e=t.sheet,i=`\n    #${this.elementId} {\n      width: ${this.width}px;\n      height: ${this.height}px;\n      margin: 0;\n      position: absolute;\n      top: 0;\n      left: 0;\n      overflow: hidden;\n    }\n    `;e.insertRule(i,0)}adjustToTheParent(){if(this.divID){const t=document.getElementById(this.divID).getBoundingClientRect();this.width=t.width,this.height=t.height}else this.width=window.innerWidth,this.height=window.innerHeight}resize(t){t.adjustToTheParent(),t.element.width=t.width*t.pixelRatio,t.element.height=t.height*t.pixelRatio,t.element.style.width=`${t.width}px`,t.element.style.height=`${t.height}px`}destroy(){this.resizeFunction&&window.removeEventListener("resize",this.resizeFunction),this.element.parentNode.removeChild(this.element),this.backgroundColor=null,this.options=null,this.element=null}}class n{constructor(t,e){this.canvas=t,this.renderer=e,this.shapes=[],this.textures=[],this.amountOfVertices=0}addShape(t){this.shapes.includes(t)||(this.shapes.push(t),this.renderer.addProgramInUse(t.programInfo.program),this.amountOfVertices+=t.amountOfVertices)}deleteShape(t){const e=this.shapes.indexOf(t);-1!==e&&(this.shapes.splice(e,1),this.renderer.deleteProgramFromUse(t.programInfo.program),this.amountOfVertices-=t.amountOfVertices)}getVertexColorData(){const t=this.vertexColorData;let e=0;return this.shapes.forEach((i=>{const r=i.color.buffer;for(let i=0;i<r.length;i+=1)t[e+i]=r[i];e+=r.length})),t}render(){this.renderer.render()}destroy(){this.shapes.forEach((t=>t.destroy())),this.textures.forEach((t=>this.renderer.gl.deleteTexture(t.texture))),this.shapes=null}}function o(t,e,i){const r=t.createShader(t.VERTEX_SHADER);t.shaderSource(r,e);const n=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(n,i),t.compileShader(r),!t.getShaderParameter(r,t.COMPILE_STATUS))return void console.error("ERROR compiling vertex shader!",t.getShaderInfoLog(r));if(t.compileShader(n),!t.getShaderParameter(n,t.COMPILE_STATUS))return void console.error("ERROR compiling fragment shader!",t.getShaderInfoLog(n));const o=t.createProgram();return t.attachShader(o,r),t.attachShader(o,n),function(t,e){t.bindAttribLocation(e,0,"a_position"),t.bindAttribLocation(e,1,"a_color"),t.bindAttribLocation(e,2,"a_texcoord")}(t,o),t.linkProgram(o),t.getProgramParameter(o,t.LINK_STATUS)||console.error("ERROR linking program!",t.getProgramInfoLog(o)),o}function s(t){switch(t){case"basic":return"\n      precision mediump float;\n\n      uniform float u_pixelratio;\n      uniform vec2 u_resolution;\n\n      attribute vec2 a_position;\n\n      uniform float u_rotation;\n      uniform vec2 u_scale;\n      uniform vec2 u_position;\n\n      void main() {\n        vec2 pos = a_position * u_scale;\n\n        float t = u_rotation;\n        mat2 matrix = mat2(cos(t), -sin(t), sin(t), cos(t));\n\n        // rotation and translation\n        pos = (matrix * pos + u_position) / (u_resolution / u_pixelratio * 0.5);\n\n        gl_Position = vec4(pos, 0.0, 1.0);\n      }\n      ";case"child":return"\n      precision mediump float;\n\n      uniform float u_pixelratio;\n      uniform vec2 u_resolution;\n\n      attribute vec2 a_position;\n\n      uniform float u_rotation;\n      uniform vec2 u_position;\n      uniform vec2 u_scale;\n\n      uniform float u_parent_rotation;\n      uniform vec2 u_parent_position;\n\n      void main() {\n        vec2 pos0 = u_parent_position;\n        float t0 = u_parent_rotation;\n\n        vec2 pos = a_position * u_scale;\n        float t = u_rotation;\n\n        // first childs own rotaion and relation to the parent\n        mat2 m = mat2(cos(t), -sin(t), sin(t), cos(t));\n        pos = m * pos + u_position;\n\n        // then parents rotations effect on the child\n        mat2 m0 = mat2(cos(t0), -sin(t0), sin(t0), cos(t0));\n        pos0 = (m0 * pos + pos0) / (u_resolution / u_pixelratio * 0.5);\n\n        gl_Position = vec4(pos0, 0.0, 1.0);\n      }\n      ";case"points":return"\n    precision mediump float;\n\n    // figure pixelratio later\n    uniform float u_pixelratio;\n    uniform vec2 u_resolution;\n    uniform float u_scale;\n\n    attribute vec2 a_position;\n    attribute vec4 a_color;\n\n    varying vec4 v_color;\n\n    void main(void) {\n      v_color = a_color;\n      gl_Position = vec4((a_position / (u_resolution / u_pixelratio * 0.5)), 0.0, 1.0);\n      gl_PointSize = u_scale;\n    }\n    ";case"lines":return"\n      precision mediump float;\n\n      // figure pixelratio later\n      uniform float u_pixelratio;\n      uniform vec2 u_resolution;\n\n      attribute vec2 a_position;\n\n      void main(void) {\n        gl_Position = vec4(a_position / (u_resolution / u_pixelratio * 0.5), 0.0, 1.0);\n      }\n      ";case"vertexColor":return"\n      precision mediump float;\n\n      uniform float u_pixelratio;\n      uniform vec2 u_resolution;\n\n      attribute vec2 a_position;\n      attribute vec4 a_color;\n\n      varying vec4 v_color;\n\n      uniform float u_rotation;\n      uniform vec2 u_position;\n      uniform vec2 u_scale;\n\n      void main() {\n        v_color = a_color;\n\n        vec2 pos = a_position * u_scale;\n\n        float t = u_rotation;\n        mat2 matrix = mat2(cos(t), -sin(t), sin(t), cos(t));\n\n        // rotation and translation\n        pos = (matrix * pos + u_position) / (u_resolution / u_pixelratio * 0.5);\n\n        gl_Position = vec4(pos, 0.0, 1.0);\n      }\n      ";case"texture":return"\n      precision mediump float;\n\n      uniform float u_pixelratio;\n      uniform vec2 u_resolution;\n\n      attribute vec2 a_position;\n      attribute vec2 a_texcoord;\n\n      uniform float u_rotation;\n      uniform vec2 u_position;\n      uniform vec2 u_scale;\n\n      varying highp vec2 v_texcoord;\n\n      void main() {\n        v_texcoord = a_texcoord;\n\n        vec2 pos = a_position * u_scale;\n\n        float t = u_rotation;\n        mat2 matrix = mat2(cos(t), -sin(t), sin(t), cos(t));\n\n        // rotation and translation\n        pos = (matrix * pos + u_position) / (u_resolution / u_pixelratio * 0.5);\n\n        gl_Position = vec4(pos, 0.0, 1.0);\n      }\n      "}}function a(t){switch(t){case"basic":case"child":case"lines":return"\n      precision mediump float;\n\n      uniform vec4 u_color;\n\n      void main() {\n        gl_FragColor = u_color;\n      }\n      ";case"vertexColor":case"points":return"\n    precision mediump float;\n\n      varying vec4 v_color;\n\n      void main() {\n        gl_FragColor = v_color;\n      }\n      ";case"texture":return"\n      varying highp vec2 v_texcoord;\n\n      uniform sampler2D u_texture;\n\n      void main(void) {\n        gl_FragColor = texture2D(u_texture, v_texcoord);\n      }\n      "}}class h{constructor(t){this.WebGL_Program=t,this.U_PIXELRATIO=null,this.U_RESOLUTION=null,this.U_ROTATION=null,this.U_SCALE=null,this.U_POSITION=null,this.U_PARENT_POS=null,this.U_PARENT_ROT=null,this.U_COLOR=null,this.U_TEXTURE=null,this.U_TIME=null}setDefaultUniformLocations(t,e){this.U_PIXELRATIO=t.getUniformLocation(e,"u_pixelratio"),this.U_RESOLUTION=t.getUniformLocation(e,"u_resolution")}setUniformLocationsBasic(t,e=!1,i=!1,r=!0){const n=this.WebGL_Program;this.setDefaultUniformLocations(t,n),this.U_ROTATION=t.getUniformLocation(n,"u_rotation"),this.U_SCALE=t.getUniformLocation(n,"u_scale"),this.U_POSITION=t.getUniformLocation(n,"u_position"),i&&(this.U_TEXTURE=t.getUniformLocation(n,"u_texture")),r&&(this.U_COLOR=t.getUniformLocation(n,"u_color")),e&&(this.U_PARENT_POS=t.getUniformLocation(n,"u_parent_position"),this.U_PARENT_ROT=t.getUniformLocation(n,"u_parent_rotation"))}setUniformLocationsPoints(t){const e=this.WebGL_Program;this.setDefaultUniformLocations(t,e),this.U_SCALE=t.getUniformLocation(e,"u_scale")}setUniformLocationsLines(t){const e=this.WebGL_Program;this.setDefaultUniformLocations(t,e),this.U_COLOR=t.getUniformLocation(e,"u_color")}setUniformLocationTime(t){this.U_TIME=t.getUniformLocation(this.WebGL_Program,"u_time")}}class c{constructor(t){this.scene,this.canvas=t,this.gl,this.resolution=[this.canvas.element.width,this.canvas.element.height],this.programs={},this.programsInUse=[],this.customProgramCount=0,this.previousTextureNumber=null,this.frameCount=0,this.previousTime=0,this.drawCalls=0,this.frameRate=0,this.tickmaxsamples=100,this.tickindex=0,this.ticksum=0,this.ticklist=Array(100).fill(0),this.stopRenderLoopGiven=!1,this.init()}init(){const t=this.setupGL();t&&(this.programs=function(t){const e={},i=o(t,s("basic"),a("basic"));e.basic=new h(i),e.basic.setUniformLocationsBasic(t);const r=o(t,s("child"),a("child"));e.child=new h(r),e.child.setUniformLocationsBasic(t,!0);const n=o(t,s("points"),a("points"));e.points=new h(n),e.points.setUniformLocationsPoints(t);const c=o(t,s("lines"),a("lines"));e.lines=new h(c),e.lines.setUniformLocationsLines(t);const u=o(t,s("texture"),a("texture"));e.texture=new h(u),e.texture.setUniformLocationsBasic(t,!1,!0);const l=o(t,s("vertexColor"),a("vertexColor"));return e.vertexColor=new h(l),e.vertexColor.setUniformLocationsBasic(t,!1,!1,!1),e}(t))}setupGL(){const t={alpha:!0,premultipliedAlpha:!1,preserveDrawingBuffer:this.canvas.preserveDrawingBuffer},e=function(){if(window.WebGL2RenderingContext)return"webgl2";if(window.WebGLRenderingContext)return"webgl";{const t=document.createElement("canvas");try{const e=t.getContext("experimental-webgl");if(t.loseContext(),e){let t=document.createElement("canvas");return t.getContext("experimental-webgl").getExtension("WEBGL_lose_context").loseContext(),t=null,"experimental-webgl"}}catch(t){console.log(t),window.alert("Your browser does not support WegGL!\nPlease use Chrome or Firefox if you want to see all the features.")}}return!1}();if(!e)return;const i=this.canvas.element.getContext(e,t),r=this.canvas.backgroundColor,n=this.canvas.transparent?0:r[3];return i.clearColor(r[0],r[1],r[2],n),i.clear(i.COLOR_BUFFER_BIT),i.enable(i.CULL_FACE),i.enable(i.BLEND),i.blendEquation(i.FUNC_ADD),i.blendFuncSeparate(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA,i.ONE,i.ONE),this.gl=i,i}setBuffersAndAttributes(t,e){const i=e.position,r=e.index,n=e.uv,o=e.color;t.enableVertexAttribArray(0),t.bindBuffer(t.ARRAY_BUFFER,i),t.vertexAttribPointer(0,2,t.FLOAT,!1,0,0),n&&(t.enableVertexAttribArray(2),t.bindBuffer(t.ARRAY_BUFFER,n),t.vertexAttribPointer(2,2,t.FLOAT,!1,0,0)),o&&(t.enableVertexAttribArray(1),t.bindBuffer(t.ARRAY_BUFFER,o),t.vertexAttribPointer(1,4,t.FLOAT,!1,0,0)),e.drawElements&&t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,r)}setGeneralUniforms(t,e){t.uniform2fv(e.U_RESOLUTION,this.resolution),t.uniform1f(e.U_PIXELRATIO,this.canvas.pixelRatio),e.U_TIME&&t.uniform1f(e.U_TIME,this.previousTime/1e3)}setProgramUniforms(t,e,i){if(i.hasParent&&(t.uniform2fv(e.U_PARENT_POS,i.parent.position.getAsArray()),t.uniform1f(e.U_PARENT_ROT,i.parent.rotation)),t.uniform2fv(e.U_POSITION,i.position.getAsArray()),t.uniform2fv(e.U_SCALE,i.scale.getAsArrayScaled(i.scaleFactor)),t.uniform1f(e.U_ROTATION,i.rotation),e.U_COLOR&&t.uniform4fv(e.U_COLOR,i.color.getAsArray()),i.programInfo.hasTexture){const e=i.programInfo.texture;t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,e.texture)}}render(){const t=this.gl;t.viewport(0,0,t.canvas.width,t.canvas.height),this.canvas.clearBeforeRender&&t.clear(t.COLOR_BUFFER_BIT);const e=this.scene.shapes.length;e>0&&(this.programsInUse.forEach((e=>{t.useProgram(e[0].WebGL_Program),this.setGeneralUniforms(t,e[0])})),this.scene.shapes.forEach((e=>{const i=e.programInfo,r=i.program,n=r.WebGL_Program;t.useProgram(n),this.setBuffersAndAttributes(t,i),this.setProgramUniforms(t,r,e),i.drawElements?t.drawElements(i.drawMode,e.amountOfVertices,t.UNSIGNED_SHORT,0):t.drawArrays(i.drawMode,0,e.vertexData.positions.length/2)})),this.frameCount+=1),this.drawCalls=e}runRenderLoop(t){this.stopRenderLoopGiven=!1,window.requestAnimationFrame((e=>{if(this.stopRenderLoopGiven)return;const i=(e-this.previousTime)/1e3;this.updateFrameRate(i),this.previousTime=e,this.resolution[0]=this.canvas.element.width,this.resolution[1]=this.canvas.element.height,t(i),this.runRenderLoop(t)}))}drawPoints(t,e,i){2*t.length!==e.length&&console.error(`Points array lengths don't match pos: ${t.length} and color: ${e.length}`);const r=this.gl,n=this.programs.points,o=n.WebGL_Program,s=t,a=e;r.useProgram(o);const h=r.createBuffer();r.enableVertexAttribArray(0),r.bindBuffer(r.ARRAY_BUFFER,h),r.bufferData(r.ARRAY_BUFFER,new Float32Array(s),r.STATIC_DRAW),r.vertexAttribPointer(0,2,r.FLOAT,!1,0,0);const c=r.createBuffer();r.enableVertexAttribArray(1),r.bindBuffer(r.ARRAY_BUFFER,c),r.bufferData(r.ARRAY_BUFFER,new Float32Array(a),r.STATIC_DRAW),r.vertexAttribPointer(1,4,r.FLOAT,!0,0,0),r.bindBuffer(r.ARRAY_BUFFER,null),r.uniform1f(n.U_SCALE,i*this.canvas.pixelRatio),r.uniform2fv(n.U_RESOLUTION,this.resolution),r.uniform1f(n.U_PIXELRATIO,this.canvas.pixelRatio),r.drawArrays(r.POINTS,0,s.length/2),r.deleteBuffer(h),r.deleteBuffer(c)}drawLines(t,e=null){const i=this.gl,r=this.programs.lines,n=r.WebGL_Program,o=e?e.getAsArray():[1,1,1,1],s=t;i.useProgram(n);const a=i.createBuffer();i.enableVertexAttribArray(0),i.bindBuffer(i.ARRAY_BUFFER,a),i.bufferData(i.ARRAY_BUFFER,new Float32Array(s),i.STATIC_DRAW),i.vertexAttribPointer(0,2,i.FLOAT,!1,0,0),i.uniform4fv(r.U_COLOR,o),i.uniform2fv(r.U_RESOLUTION,this.resolution),i.uniform1f(r.U_PIXELRATIO,this.canvas.pixelRatio),i.drawArrays(i.LINES,0,s.length/2),i.deleteBuffer(a)}updateFrameRate(t){this.ticksum-=this.ticklist[this.tickindex],this.ticksum+=t,this.ticklist[this.tickindex]=t,this.tickindex++,this.tickindex===this.tickmaxsamples&&(this.tickindex=0),this.frameRate=parseInt(1e4/this.ticksum/this.tickmaxsamples,10)}stop(){this.stopRenderLoopGiven=!0}destroy(){this.stop(),Object.values(this.programs).forEach((t=>this.gl.deleteProgram(t.program))),this.gl.getExtension("WEBGL_lose_context").loseContext(),this.gl=null,this.canvas=null,this.programs=null,this.resolution=null,this.ticklist=null}createShaderProgram(t,e){const i=this.gl,r=o(i,t||s("texture"),e||a("basic")),n=new h(r);return n.setUniformLocationsBasic(i,!1,!1,!1),n.setUniformLocationTime(i),this.programs[`c${this.customProgramCount}`]=n,this.customProgramCount++,n}addProgramInUse(t){const e=this.programsInUse.indexOf((e=>e[0]==t));-1!==e?this.programsInUse[e][1]+=1:this.programsInUse.push([t,1])}deleteProgramFromUse(t){const e=this.programsInUse.indexOf(t);-1!==e&&(1===this.programsInUse[e][1]?this.programsInUse.splice(e,1):this.programsInUse[e][1]-=1)}}class u{constructor(t,e){this.x=t,this.y=e,this._arr=null}add(t){return this.x+=t.x,this.y+=t.y,this}addInPlace(t,e){return this.x+=t,this.y+=e,this}negate(){return this.x=-this.x,this.y=-this.y,this}multiply(t){return this.x*=t,this.y*=t,this}div(t){return this.x/=t,this.y/=t,this}mag(){return Math.sqrt(this.magSq())}magSq(){const t=this.x,e=this.y;return t*t+e*e}limit(t){const e=this.magSq();return e>t*t&&(this.div(Math.sqrt(e)),this.multiply(t)),this}normalize(){return this.div(this.mag())}setMag(t){return this.normalize().multiply(t)}clone(){return new u(this.x,this.y)}getAsArray(){return this._arr?this._arr[0]=this.x:this._arr=[this.x,this.y],this._arr[1]=this.y,this._arr}getAsArrayScaled(t){return this._arr?this._arr[0]=this.x:this._arr=[this.x,this.y],this._arr[1]=this.y,this._arr.map((e=>e*t))}}class l{constructor(t){this.scene=t,this.position,this.rotation=0,this.scale=new u(1,1),this.scaleFactor=1,this.color,this.centerOfRotation,this.vertexData,this.amountOfVertices=0,this.programInfo={position:null,index:null,uv:null,color:null,drawMode:0,program:null,drawElements:!1,hasTexture:!1},this.updatable=!1,this.isClone=!1,this.isVisible,this.isActive,this.hasParent=!1,this.parent,this.children}addChild(t){this.children||(this.children=[]),this.children.push(t),t.hasParent=!0,t.parent=this,t.programInfo.program=this.scene.renderer.programs.child,this.scene.addShape(t)}deleteChild(t){const e=this.children.indexOf(t);-1!==e&&this.children.splice(e,1)}buildProgramInfo(t,e=null){const i=this.scene.renderer.gl,r=e||this.scene.renderer.programs.basic,n=i.createBuffer();i.bindBuffer(i.ARRAY_BUFFER,n),i.bufferData(i.ARRAY_BUFFER,new Float32Array(t.positions),i.STATIC_DRAW);const o=i.createBuffer();i.bindBuffer(i.ELEMENT_ARRAY_BUFFER,o),i.bufferData(i.ELEMENT_ARRAY_BUFFER,new Uint16Array(t.indices),i.STATIC_DRAW),t.uvs&&this.bindUVBuffer(t.uvs,i),t.colors&&this.setVertexColors(t.colors),this.programInfo.position=n,this.programInfo.index=o,this.programInfo.drawMode=i.TRIANGLES,this.programInfo.program=r,this.programInfo.drawElements=!0}clone(){const t=new l(this.scene);return t.vertexData=this.vertexData,t.programInfo=this.programInfo,t.amountOfVertices=this.amountOfVertices,t.color=this.color.clone(),t.position=new u(0,0),t.isClone=!0,t}merge(t){if(t.programInfo.drawMode!=this.programInfo.drawMode||t.programInfo.drawElements!=this.programInfo.drawElements||(t.vertexData.colors?!this.vertexData.colors:this.vertexData.colors)||(t.vertexData.uvs?!this.vertexData.uvs:this.vertexData.uvs))return console.error("Merge was unsuccesful because shapes are not compatible"),this;const e=t.position.addInPlace(-this.position.x,-this.position.y),i=t.rotation,r=t.scale,n=[...t.vertexData.positions],o=t.vertexData.indices.map((t=>t+this.vertexData.positions.length/2));for(let e=0;e<n.length;e+=2){const o=n[e]*r.x*t.scaleFactor,s=n[e+1]*r.y*t.scaleFactor;n[e]=o*Math.cos(i)-s*Math.sin(i),n[e+1]=o*Math.sin(i)+s*Math.cos(i)}for(let t=0;t<n.length;t+=2)n[t]+=e.x,n[t+1]+=e.y;return this.vertexData.positions=this.vertexData.positions.concat(n),this.vertexData.indices=this.vertexData.indices.concat(o),this.vertexData.colors&&(this.vertexData.colors=this.vertexData.colors.concat(t.vertexData.colors)),this.vertexData.uvs&&(this.vertexData.uvs=this.vertexData.uvs.concat(t.vertexData.uvs)),this.amountOfVertices=this.vertexData.indices.length,this.destroyProgramBuffers(),this.buildProgramInfo(this.vertexData,this.programInfo.program),t.destroy(),this}addTexture(t){const e=this.scene.renderer.programs.texture;this.buildUVBuffer(),this.programInfo.hasTexture=!0,this.programInfo.texture=t,this.programInfo.program=e,this.scene.renderer.addProgramInUse(e)}setShaderProgram(t,e=!1){e&&this.buildUVBuffer(),this.programInfo.program=t,this.scene.renderer.addProgramInUse(t)}setVertexColors(t){if(t.length!==2*this.vertexData.positions.length)return void console.error("Color array has an invalid length");const e=this.scene.renderer.gl,i=this.scene.renderer.programs.vertexColor;this.vertexData.colors=t;const r=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,r),e.bufferData(e.ARRAY_BUFFER,new Float32Array(t),e.STATIC_DRAW),this.programInfo.color=r,this.programInfo.program=i,this.scene.renderer.addProgramInUse(i)}bindUVBuffer(t,e){if(!this.programInfo)return void console.error("No programInfo-object");const i=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,i),e.bufferData(e.ARRAY_BUFFER,new Float32Array(t),e.STATIC_DRAW),this.programInfo.uv=i}destroy(t=!0){this.scene.deleteShape(this),this.hasParent&&this.parent.deleteChild(this),this.children&&this.children.forEach((t=>t.destroy())),this.isClone||this.vertexData.destroy(),t&&this.destroyProgramBuffers(),this.programInfo=null,this.vertexData=null,this.color.buffer=null,this.color=null}destroyProgramBuffers(){if(this.isClone)return;const t=this.scene.renderer.gl,e=this.programInfo.position,i=this.programInfo.index,r=this.programInfo.uv,n=this.programInfo.color;e&&t.deleteBuffer(e),i&&t.deleteBuffer(i),r&&t.deleteBuffer(r),n&&t.deleteBuffer(n)}}class p{constructor(t,e,i=null,r=null){this.positions=t,this.indices=e,this.uvs=i,this.colors=r}destroy(){this.positions=null,this.indices=null,this.uvs=null,this.colors=null}}class f{constructor(t,e,i,r=1){this.r=t,this.g=e,this.b=i,this.a=r,this._arr}set(t,e,i,r=1){this.r=t,this.g=e,this.b=i,this.a=r}getAsArray(){return this._arr?(this._arr[0]=this.r,this._arr[1]=this.g,this._arr[2]=this.b,this._arr[3]=this.a):this._arr=[this.r,this.g,this.b,this.a],this._arr}clone(){return new f(this.r,this.g,this.b,this.a)}}class d{constructor(){this.xx=0,this.yx=0,this.zx=0,this.xy=0,this.yy=0,this.zy=0,this.zx=0,this.zy=0,this.zz=0}set(t,e,i,r,n,o,s,a,h){return this.xx=t,this.yx=e,this.zx=i,this.xy=r,this.yy=n,this.zy=o,this.zx=s,this.zy=a,this.zz=h,this}identity(){return this.xx=1,this.yx=0,this.zx=0,this.xy=0,this.yy=1,this.zy=0,this.zx=0,this.zy=0,this.zz=1,this}mult(t){const e=this.xx*t.xx+this.yx*t.xy+this.zx*t.xz,i=this.xx*t.yx+this.yx*t.yy+this.zx*t.yz,r=this.xx*t.zx+this.yx*t.zy+this.zx*t.zz,n=this.xy*t.xx+this.yy*t.xy+this.zy*t.xz,o=this.xy*t.yx+this.yy*t.yy+this.zy*t.yz,s=this.xy*t.zx+this.yy*t.zy+this.zy*t.zz,a=this.xz*t.xx+this.yz*t.xy+this.zz*t.xz,h=this.xz*t.yx+this.yz*t.yy+this.zz*t.yz,c=this.xz*t.zx+this.yz*t.zy+this.zz*t.zz;return this.set(e,i,r,n,o,s,a,h,c),this}clone(){const t=new d;return t.set(this.xx,this.yx,this.zx,this.xy,this.yy,this.zy,this.xz,this.yz,this.zz),t}}class m{constructor(t,e){this.number=t,this.texture=e}from(t){}}const y=[.68,.59,.84,1];class v{constructor(t,e){this.divID=t,this.options=Object.assign({width:window.innerWidth,height:window.innerHeight,backgroundColor:y,autoResize:!0,clearBeforeRender:!0,preserveDrawingBuffer:!1,transparent:!1},e||{}),this.canvas,this.renderer,this.scene,this.init()}init(){const t=new r(this.divID,this.options),e=new c(t),i=new n(t,e);e.scene=i,this.canvas=t,this.scene=i,this.renderer=e}destroy(){this.scene.destroy(),this.renderer.destroy(),this.canvas.destroy(),this.options=null,this.renderer=null,this.scene=null,this.canvas=null}}v.Scene=n,v.Renderer2D=c,v.Circle=class extends l{constructor(t,e){super(t),this.options=e||{},this.radius=this.options.radius||50,this.arc=this.options.arc||1,this.tessellation=this.options.tessellation||64,this.color=this.options.color||new f(0,.5,.5),this.position=new u(0,0),this.rotation=0,this.init()}init(){const t=this.buildGeometry();this.buildProgramInfo(t)}buildGeometry(){const t=this.arc,e=this.tessellation,i=this.radius,r=[],n=[];r.push(0,0);const o=2*Math.PI*t,s=o/e;for(let t=0;t<o+s/2;t+=s){const e=i*Math.cos(t),n=i*Math.sin(t);r.push(e,n)}const a=r.length/2;for(let t=1;t<a-1;t++)n.push(t+1,0,t);const h=new p(r,n);return this.vertexData=h,this.amountOfVertices=n.length,h}buildUVBuffer(){const t=this.scene.renderer.gl,e=this.arc,i=this.tessellation,r=[];r.push(.5,.5);const n=2*Math.PI*e,o=n/i;for(let t=0;t<n+o/2;t+=o){const e=(Math.cos(t)+1)/2,i=(1-Math.sin(t))/2;r.push(e,i)}this.vertexData.uvs=r,this.bindUVBuffer(r,t)}},v.Rectangle=class extends l{constructor(t,e){super(t),this.options=e||{},this.width=this.options.width||10,this.height=this.options.height||10,this.color=this.options.color||new f(0,.5,.5),this.position=new u(0,0),this.rotation=0,this.init()}init(){const t=this.buildGeometry();this.buildProgramInfo(t)}buildGeometry(){const t=this.width,e=this.height,i=[],r=[0,1,2,0,3,1];i.push(-t/2,-e/2),i.push(t/2,e/2),i.push(-t/2,e/2),i.push(t/2,-e/2);const n=new p(i,r);return this.vertexData=n,this.amountOfVertices=r.length,n}buildProgramInfo(t){const e=this.scene.renderer.gl,i=this.scene.renderer.programs.basic,r=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,r),e.bufferData(e.ARRAY_BUFFER,new Float32Array(t.positions),e.STATIC_DRAW);const n=e.createBuffer();e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n),e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(t.indices),e.STATIC_DRAW),this.programInfo.position=r,this.programInfo.index=n,this.programInfo.drawMode=e.TRIANGLES,this.programInfo.program=i,this.programInfo.drawElements=!0}buildUVBuffer(){const t=this.scene.renderer.gl,e=[0,1,1,0,0,0,1,1];this.vertexData.uvs=e,this.bindUVBuffer(e,t)}},v.CustomShape=class extends l{constructor(t,e){super(t),this.position=new u(0,0),this.rotation=0,this.vertexData=e,this.color=new f(.5,.5,.5,1),this.init()}init(){const t=this.vertexData;this.amountOfVertices=t.indices.length,this.buildProgramInfo(t)}buildProgramInfo(t){const e=this.scene.renderer.gl,i=this.scene.renderer.programs.basic,r=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,r),e.bufferData(e.ARRAY_BUFFER,new Float32Array(t.positions),e.STATIC_DRAW);const n=e.createBuffer();e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n),e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(t.indices),e.STATIC_DRAW),this.programInfo.position=r,this.programInfo.index=n,this.programInfo.program=i,this.programInfo.drawMode=e.TRIANGLES,this.programInfo.drawElements=!0,t.uvs&&this.bindUVBuffer(t.uvs,e)}},v.VertexData=p,v.Vec2=u,v.Matrix3=d,v.Color=f,v.TextureLoader=class{constructor(t){this.graphics=t,this.gl=t.renderer.gl}load(t){const e=this.gl,i=e.createTexture();e.bindTexture(e.TEXTURE_2D,i);const r=e.RGBA,n=e.RGBA,o=e.UNSIGNED_BYTE,s=new Uint8Array([200,200,200,255]);e.texImage2D(e.TEXTURE_2D,0,r,1,1,0,n,o,s);const a=t=>0==(t&t-1),h=new Image;h.onload=function(){e.bindTexture(e.TEXTURE_2D,i),e.texImage2D(e.TEXTURE_2D,0,r,n,o,h),a(h.width)&&a(h.height)?e.generateMipmap(e.TEXTURE_2D):(e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR))},h.src=t;const c=this.graphics.scene.textures.length;return this.graphics.scene.textures.push(i),new m(c,i)}},v.Program=h,v.isMobile=function(){return void 0!==window.orientation||-1!==navigator.userAgent.indexOf("IEMobile")}}},e={};function i(r){var n=e[r];if(void 0!==n)return n.exports;var o=e[r]={exports:{}};return t[r].call(o.exports,o,o.exports,i),o.exports}i.d=(t,e)=>{for(var r in e)i.o(e,r)&&!i.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var r={};(()=>{var t=r,e=i(627),n=i(276),o=i(550),s=i(434),a=i(595),h=i(253),c=i(234),u=i(905),l=i(636),p=i(479),f=i(707),d=i(725),m=i(469),y=i(236),v=i(36),g=i(33),x=function(){function t(){}return t.BoxGeometry=e.BoxGeometry,t.PlaneGeometry=n.PlaneGeometry,t.SphereGeometry=o.SphereGeometry,t.WebGLRenderer=s.WebGLRenderer,t.Scene=a.Scene,t.StandardMaterial=h.StandardMaterial,t.Color=c.Color,t.NaiveMaterial=u.NaiveMaterial,t.Mesh=l.Mesh,t.DirectionalLight=p.DirectionalLight,t.Camera=f.Camera,t.FreeCamera=d.FreeCamera,t.TargetCamera=m.TargetCamera,t.Vector3=y.Vector3,t.HelperManager=v.HelperManager,t.VALO2D=g.VALO2D,t}();t.default=x})();var n=exports,o=r.default;for(var s in o)n[s]=o[s];o.__esModule&&Object.defineProperty(n,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,